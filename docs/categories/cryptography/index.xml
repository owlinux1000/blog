



<?xml-stylesheet type="text/xsl" href="#stylesheet" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <xsl:stylesheet id="stylesheet" version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" exclude-result-prefixes="xsl">
    <xsl:output method="html" doctype-system="about:legacy-compat" />
    <xsl:template match="/rss">
      <html lang="en-us">
        <head>
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <title>cryptography RSS | $ make life</title>
          <link rel="stylesheet" href="https://owlinux1000.github.io/blog/css/base.min.21688b64210142c045c9a1d930a48fc517f428060c78a3a012d71f971874c5c3.css" integrity="sha256-IWiLZCEBQsBFyaHZMKSPxRf0KAYMeKOgEtcflxh0xcM=" />
        </head>
        <body>
          <nav class="u-background">
  <div class="u-wrapper">
    <ul class="Banner">
      <li class="Banner-item Banner-item--title">
        <a class="Banner-link u-clickable" href="https://owlinux1000.github.io/blog/">$ make life</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="https://owlinux1000.github.io/blog/about/">About</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="https://owlinux1000.github.io/blog/post/">Posts</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="https://owlinux1000.github.io/blog/tags/">Tags</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="https://owlinux1000.github.io/blog/categories/">Categories</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="https://owlinux1000.github.io/blog/index.xml">RSS</a>
      </li>
      
    </ul>
  </div>
</nav>
          <main>
            <div class="u-wrapper">
              <div class="u-padding">
                <h2 class="Heading-title">
                  
                  <a class="Heading-link u-clickable" href="https://owlinux1000.github.io/blog/categories/cryptography/index.xml" rel="bookmark">cryptography RSS</a>
                  
                </h2>
                
                <p>
                  To subscribe to this RSS feed, copy its address and paste it into your favorite feed reader.
                </p>
                
              </div>
            </div>
          </main>
          
<footer class="Footer">
  <div class="u-wrapper">
    <div class="u-padding">
      Except where otherwise noted, content on this site is licensed under a <a href="http://creativecommons.org/licenses/by/4.0/" rel="license"> Creative Commons Attribution 4.0 International License</a>.
    </div>
  </div>
</footer>

        </body>
      </html>
    </xsl:template>
  </xsl:stylesheet>
  <channel>
    <title>cryptography on $ make life</title>
    <link>https://owlinux1000.github.io/blog/categories/cryptography/</link>
    <description>Recent content in cryptography on $ make life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Apr 2019 22:33:26 +0900</lastBuildDate>
    <atom:link href="https://owlinux1000.github.io/blog/categories/cryptography/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>線形合同法で生成される乱数値を予測する</title>
      <link>https://owlinux1000.github.io/blog/post/predict_lcg/</link>
      <pubDate>Mon, 01 Apr 2019 22:33:26 +0900</pubDate>
      <guid>https://owlinux1000.github.io/blog/post/predict_lcg/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;線形合同法（LCG）とは、至極一般的かつ簡易に実装することができる乱数生成手法の1つです。先日行われたVolgaCTF 2019では、この線形合同法により生成される乱数値を予測する問題（問題名LG）が出題されました。本問題ではx0 ~ x6に相当する6つの乱数が表示され、それを元に次の値を算出する問題です。&lt;/p&gt;

&lt;h2 id=&#34;線形合同法&#34;&gt;線形合同法&lt;/h2&gt;

&lt;p&gt;線形合同法は、以下の式で定義されます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;x1 = (a * x0 + c) % p&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このとき、x0は乱数のseed値、a, c, pがパラメータとなり適切な値を選びます。今回の問題では、x0 ~ x6までの値が与えられ、その次の値を入力するといったものでした。「a, c, pがわからないと無理じゃない？ｗ」と思ってしまったのですが、どうやら行列演算することで「a, c, p」を算出可能らしいです。&lt;/p&gt;

&lt;h2 id=&#34;線形合同法のパラメータの算出&#34;&gt;線形合同法のパラメータの算出&lt;/h2&gt;

&lt;p&gt;まずはじめに、各種x0 ~ x6を用いて以下の4つの行列を作成します。それらの行列式を用いて、各行列式の最大公約数(GCD)を算出します。これが、「p」に相当します。その後、(x3 - x4) と(x2 - x3)の法pにおける逆元を乗算し、再度pで割ると「a」になります。最後に、&lt;code&gt;(x4 - a * x3) % p&lt;/code&gt;で割った際の剰余がcになる。以上の計算を行うコードを以下に示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#coding: utf-8&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;math&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;numpy&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;np&lt;/span&gt;

x0 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;64302589647963933737451564&lt;/span&gt;
x1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;23099347408308738343740115&lt;/span&gt;
x2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;60779187967701597680605077&lt;/span&gt;
x3 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;41531243105709646792416331&lt;/span&gt;
x4 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;71461317334046189800115379&lt;/span&gt;
x5 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;50094315434186546595562390&lt;/span&gt;
x6 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;27719142972686291997765807&lt;/span&gt;

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# なんかnp.linalg.detがエラー吐くので作成&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;det&lt;/span&gt;(matrix):
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; matrix[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; matrix[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; matrix[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; matrix[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# https://stackoverflow.com/questions/4798654/modular-multiplicative-inverse-function-in-python&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;egcd&lt;/span&gt;(a, b):
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; (b, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        g, y, x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; egcd(b &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; a, a)
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; (g, x &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; (b &lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt; a) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; y, y)
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;modinv&lt;/span&gt;(a, m):
    g, x, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; egcd(a, m)
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; g &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#d2413a;font-weight:bold&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;modular inverse does not exist&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; m

matrix0 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;array([
    [x1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x2 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1],
    [x2 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1]
])

matrix1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;array([
    [x2 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1],
    [x3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x4 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1]
])

matrix2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;array([
    [x3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x4 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1],
    [x4 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x5 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1]
])

matrix3 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;array([
    [x4 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x5 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1],
    [x5 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x6 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1]
])

p0 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; math&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;gcd(det(matrix0), det(matrix1))
p1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; math&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;gcd(p0, det(matrix2))
p &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; math&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;gcd(p1, det(matrix3))

a &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ((x3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x4) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; modinv(x2 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x3, p)) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p
c &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (x4 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x3) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;assert&lt;/span&gt; x1 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x0 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Not eqaul&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;assert&lt;/span&gt; x2 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x1 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Not eqaul&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;assert&lt;/span&gt; x3 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x2 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Not eqaul&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;assert&lt;/span&gt; x4 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x3 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Not eqaul&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;assert&lt;/span&gt; x5 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x4 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Not eqaul&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;assert&lt;/span&gt; x6 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x5 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Not eqaul&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;print&lt;/span&gt;((a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x6 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#=&amp;gt; 54571278391299526410540376&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;本記事では、線形合同法における乱数値の予測方法についてまとめた。パラメータが不明な場合でも本手法を用いることで解読なので覚えておきたい。&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>