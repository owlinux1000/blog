<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OwLinux1000&#39;s Blog</title>
    <link>https://owlinux1000.github.io/blog/</link>
    <description>Recent content on OwLinux1000&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Apr 2019 22:33:26 +0900</lastBuildDate>
    
        <atom:link href="https://owlinux1000.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>線形合同法で生成される乱数値を予測する</title>
      <link>https://owlinux1000.github.io/blog/posts/predict_lcg/</link>
      <pubDate>Mon, 01 Apr 2019 22:33:26 +0900</pubDate>
      
      <guid>https://owlinux1000.github.io/blog/posts/predict_lcg/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;線形合同法（LCG）とは、至極一般的かつ簡易に実装することができる乱数生成手法の1つです。先日行われたVolgaCTF 2019では、この線形合同法により生成される乱数値を予測する問題（問題名LG）が出題されました。本問題ではx0 ~ x6に相当する6つの乱数が表示され、それを元に次の値を算出する問題です。&lt;/p&gt;

&lt;h2 id=&#34;線形合同法&#34;&gt;線形合同法&lt;/h2&gt;

&lt;p&gt;線形合同法は、以下の式で定義されます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;x1 = (a * x0 + c) % p&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このとき、x0は乱数のseed値、a, c, pがパラメータとなり適切な値を選びます。今回の問題では、x0 ~ x6までの値が与えられ、その次の値を入力するといったものでした。「a, c, pがわからないと無理じゃない？ｗ」と思ってしまったのですが、どうやら行列演算することで「a, c, p」を算出可能らしいです。&lt;/p&gt;

&lt;h2 id=&#34;線形合同法のパラメータの算出&#34;&gt;線形合同法のパラメータの算出&lt;/h2&gt;

&lt;p&gt;まずはじめに、各種x0 ~ x6を用いて以下の4つの行列を作成します。それらの行列式を用いて、各行列式の最大公約数(GCD)を算出します。これが、「p」に相当します。その後、(x3 - x4) と(x2 - x3)の法pにおける逆元を乗算し、再度pで割ると「a」になります。最後に、&lt;code&gt;(x4 - a * x3) % p&lt;/code&gt;で割った際の剰余がcになる。以上の計算を行うコードを以下に示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#coding: utf-8&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;math&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;numpy&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;np&lt;/span&gt;

x0 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;64302589647963933737451564&lt;/span&gt;
x1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;23099347408308738343740115&lt;/span&gt;
x2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;60779187967701597680605077&lt;/span&gt;
x3 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;41531243105709646792416331&lt;/span&gt;
x4 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;71461317334046189800115379&lt;/span&gt;
x5 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;50094315434186546595562390&lt;/span&gt;
x6 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;27719142972686291997765807&lt;/span&gt;

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# なんかnp.linalg.detがエラー吐くので作成&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;det&lt;/span&gt;(matrix):
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; matrix[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; matrix[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; matrix[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; matrix[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# https://stackoverflow.com/questions/4798654/modular-multiplicative-inverse-function-in-python&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;egcd&lt;/span&gt;(a, b):
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; (b, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        g, y, x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; egcd(b &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; a, a)
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; (g, x &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; (b &lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt; a) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; y, y)
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;modinv&lt;/span&gt;(a, m):
    g, x, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; egcd(a, m)
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; g &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#d2413a;font-weight:bold&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;modular inverse does not exist&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; m

matrix0 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;array([
    [x1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x2 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1],
    [x2 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1]
])

matrix1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;array([
    [x2 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1],
    [x3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x4 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1]
])

matrix2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;array([
    [x3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x4 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1],
    [x4 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x5 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1]
])

matrix3 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;array([
    [x4 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x5 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1],
    [x5 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x0, x6 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1]
])

p0 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; math&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;gcd(det(matrix0), det(matrix1))
p1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; math&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;gcd(p0, det(matrix2))
p &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; math&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;gcd(p1, det(matrix3))

a &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ((x3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x4) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; modinv(x2 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x3, p)) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p
c &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (x4 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x3) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;assert&lt;/span&gt; x1 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x0 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Not eqaul&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;assert&lt;/span&gt; x2 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x1 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Not eqaul&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;assert&lt;/span&gt; x3 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x2 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Not eqaul&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;assert&lt;/span&gt; x4 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x3 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Not eqaul&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;assert&lt;/span&gt; x5 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x4 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Not eqaul&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;assert&lt;/span&gt; x6 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x5 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Not eqaul&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;print&lt;/span&gt;((a &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x6 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; p) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#=&amp;gt; 54571278391299526410540376&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;本記事では、線形合同法における乱数値の予測方法についてまとめた。パラメータが不明な場合でも本手法を用いることで解読なので覚えておきたい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>binarycookiesファイル解析ツールbincookie</title>
      <link>https://owlinux1000.github.io/blog/posts/analyzing_binary_cookie/</link>
      <pubDate>Wed, 06 Mar 2019 23:10:49 +0900</pubDate>
      
      <guid>https://owlinux1000.github.io/blog/posts/analyzing_binary_cookie/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;iOSやMacのフォレンジックでは、アーティファクトの1つとしてCookie情報を利用します。macOSでは、&lt;code&gt;/User/ユーザ名/Library/Cookies/Cookies.binarycookies&lt;/code&gt; に存在します。しかしながら、本ファイルは拡張子からもわかるようにバイナリ形式になっています。そこで、本記事ではこのバイナリファイルを解析するツールをご紹介します。&lt;/p&gt;

&lt;h2 id=&#34;bincookie&#34;&gt;bincookie&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/owlinux1000/bincookie&#34;&gt;bincookie&lt;/a&gt;&lt;br /&gt;
拙作のGolangで実装された解析ツールです。goユーザなら&lt;code&gt;go get&lt;/code&gt;で入りますし、Releaseからバイナリのダウンロードもできます。&lt;br /&gt;
本ツールの特徴として、&lt;code&gt;curl&lt;/code&gt;コマンドで利用できる形式として出力する点です。私の手元にあった&lt;code&gt;/Users/ユーザ名/Library/Cookies/com.apple.iTunes.binarycookies&lt;/code&gt;に対して適用した例が以下です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;$ bincookie /Users/ユーザ名/Library/Cookies/com.apple.iTunes.binarycookies
# Netscape HTTP Cookie File
# This file was generated by owlinux1000&amp;#39;s bincookie
# https://github.com/owlinux1000/bincookie

.apple.com	TRUE	/	TRUE	1566914111	xp_ci	hogehogehoge
.apple.com	TRUE	/	TRUE	1566914111	xp_ab	hogehogehoge
.xp.apple.com	TRUE	/	TRUE	1566914111	xp_aci	hogehogehog&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また、同様のソフトウェアとして以下の2つが存在します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/as0ler/BinaryCookieReader&#34;&gt;BinaryCookieReader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/horrorho/burnt-cookie&#34;&gt;Burnt Cookie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;binarycookiesファイル解析ツールbincookieの宣伝をしました。binarycookiesファイルを解析する際には、ぜひbincookie使ってみてください。バグか何かあったらissueやPR待ってます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iOSデバイスフォレンジック入門</title>
      <link>https://owlinux1000.github.io/blog/posts/an_introduction_of_ios_forensics/</link>
      <pubDate>Thu, 28 Feb 2019 21:00:00 +0900</pubDate>
      
      <guid>https://owlinux1000.github.io/blog/posts/an_introduction_of_ios_forensics/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;本記事では、&lt;strong&gt;iOSフォレンジックをやったことない&lt;/strong&gt;人向けに基本的な情報をまとめてみました。取っ掛かりとしては簡単に読める内容だと思います。主にiOSデバイスのバックアップデータやその解析ツールについてご紹介しています。&lt;/p&gt;

&lt;h2 id=&#34;準備&#34;&gt;準備&lt;/h2&gt;

&lt;p&gt;本記事では主に以下のデバイスやソフトウェアを使って検証しています。当該デバイスやバージョンでない場合同じ結果や解釈にならない可能性もありますのでご了承ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iPad mini4 (iOS 12.1.1 非Jailbreak)&lt;/li&gt;
&lt;li&gt;MacBookPro (High Sierra 10.13.6)&lt;/li&gt;
&lt;li&gt;iTunes (12.8.3)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ios-概要&#34;&gt;iOS 概要&lt;/h2&gt;

&lt;p&gt;iOSは、iPhoneやiPad、Apple Watch等で利用されているOSです。iOSは大きく分けて、以下の4つのシステムから構成されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cocoa Touch&lt;/li&gt;
&lt;li&gt;Media&lt;/li&gt;
&lt;li&gt;Cocoa Service&lt;/li&gt;
&lt;li&gt;Core OS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cocoa Touchは、名前からもわかるようにタッチ操作を始めとするユーザーインタフェースのシステムです。Mediaは、動画像や音楽などMedia用のシステムです。Cocoa Serviceは、アプリケーションにとって必要な基本的なシステムを提供しています。最後のCore OSは、ハードウェアに近いより低レイヤーなネットワークやメモリ管理、スレッドの機能などを提供しています。&lt;/p&gt;

&lt;p&gt;次に、iOSで用いられているファイルシステムについて簡単にご紹介いたします。近年のiOSではAPFS（Apple File System）と呼ばれるファイルシステムが利用されています。従来はHFS、HFS+が使われていましたが、2017年のiOS 10.3からAPFSが導入されました。APFSの特徴としては、inodeが64bitに拡張されたためより多くのファイルが扱えるようになったり、CoW（Copy on Write）のサポート、タイムスタンプがナノ秒単位まで記録するようになったりなど従来のファイルシステムに比べ大きく変わっています。より詳細な情報としては以下のWebページなどが参考になると思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/Apple_File_System&#34;&gt;Apple File System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cyberforensic.focus-s.com/knowledge/articles_detail/356/&#34;&gt;ファイルシステムがAPFSになった事による変更点&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;itunesバックアップ&#34;&gt;iTunesバックアップ&lt;/h2&gt;

&lt;p&gt;iOSデバイスにおけるデータを抽出する方法としては、物理と論理の2通りの方法があります。しかしながら、物理デバイスから情報を抽出するためには、機材が必要であったり、論理面でも有償のツールが必要なことが多く入門には不向きです。そこで本記事では、iTunesのバックアップデータを元にiOSデバイスのフォレンジック調査に役立つ情報をまとめていこうと思います。もしすでにホストマシンにiTunesを用いてバックアップをとっている人はそのデータをお使いできます。もしなければ、iOSデバイスを接続し、iTunesの画面よりバックアップをとってください。&lt;/p&gt;

&lt;p&gt;iOSデバイスのバックアップデータは、以下の場所に格納されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mac：&lt;code&gt;/User/ユーザ名/Library/Application Support/MobileSync/Backup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Windows：&lt;code&gt;\AppData\Roaming\Apple Computer\MobileSync\Backup\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Windowsストアアプリ経由でiTunesを入れた場合：&lt;code&gt;%USERPROFILE%\Apple\MobileSync\Backup&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;バックアップを行っている状態で、上記フォルダにアクセスするとハッシュ値が名前のフォルダがあると思います。それがバックアップデータの本体です。バックアップデータのフォルダの中には、主に以下のファイルやフォルダが格納されていると思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Manifest.plist&lt;/li&gt;
&lt;li&gt;Manifest.db&lt;/li&gt;
&lt;li&gt;Info.plist&lt;/li&gt;
&lt;li&gt;Status.plist&lt;/li&gt;
&lt;li&gt;大量のフォルダ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Manifest.plistは、主にバックアップの内容について記載されています。例えばバックアップした日時、バックアップを暗号化しているかどうか、インストールしたアプリケーション一覧などがあげられます。Manifest.dbは、SQLiteのデータベースファイルで、バックアップデータに含まれるファイルやフォルダの情報が格納してあります。&lt;code&gt;fileID&lt;/code&gt;カラムには、SHA1が格納されており、これはファイル名を表しています。そのため、バックアップフォルダの中で、このハッシュ値を使って検索したりします。&lt;br /&gt;
以下の図は、DB Browser for SQLiteでManifest.dbを読み込んだときの図です。CUIのsqlite3コマンドなどでも良いのですが、フォレンジック業務をやるときには、フィルターやソート、検索などが手軽に使えるほうが効率が良いので、こういったGUIツールを使っています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imgur.com/download/2PzjpVu&#34; alt=&#34;Manifest.db&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Info.plistは、主にバックアップ対象のデバイス情報について記載されています。例えば、IMEIやシリアルナンバー、最後にバックアップした日などが挙げられます。Status.plistは、主にバックアップ状況について記載されています。&lt;/p&gt;

&lt;p&gt;バックアップフォルダの中に格納されている主要なアーティファクトは、SANSの公開資料の&lt;a href=&#34;https://digital-forensics.sans.org/media/DFIR-Smartphone-Forensics-Poster.pdf&#34;&gt;DFIR-Smartphone-Forensics-Poster.pdf&lt;/a&gt; に掲載されています。とても便利なのでダウンロードしておくことをおすすめします。&lt;/p&gt;

&lt;h2 id=&#34;itunesバックアップ解析ツール&#34;&gt;iTunesバックアップ解析ツール&lt;/h2&gt;

&lt;p&gt;今まで見てきたバックアップデータなどを解析する際に役立つツールをご紹介します。&lt;/p&gt;

&lt;h3 id=&#34;plutil&#34;&gt;plutil&lt;/h3&gt;

&lt;p&gt;拡張子plistのバイナリファイルの中身を解析する際には、&lt;code&gt;plutil&lt;/code&gt;コマンドが便利です。Macの場合は標準でインストールされているのですぐに使えます。Windowsでは、&lt;a href=&#34;https://www.icopybot.com/plist-editor.htm&#34;&gt;plist Editor Pro for Windows&lt;/a&gt;というものが存在するので、それを利用できそうです（未検証）。&lt;/p&gt;

&lt;p&gt;本来&lt;code&gt;plutil&lt;/code&gt;コマンドはいろいろな操作ができますが、今回はフォレンジックでよく使うplistファイルを別のファイルに変換する操作をご紹介します。以下は、&lt;code&gt;Info.plist&lt;/code&gt;ファイルをxmlファイルに変換する場合の例です。plistファイルはバイナリファイルなので、こういった変換を行うことが必要となってきます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;$ plutil -t convert xml1 Info.plist -o Info.xml&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;-o&lt;/code&gt;オプションを忘れてしまうとplistファイル自体の中身が書き換わってしまうので注意してください。&lt;br /&gt;
その他Pythonが利用できる環境であれば、&lt;code&gt;plistlib&lt;/code&gt;ライブラリが利用できるので、これを用いてプログラマブルに解析することも可能です。&lt;/p&gt;

&lt;h3 id=&#34;iexplorer&#34;&gt;iExplorer&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://imgur.com/download/Aogfu9Z&#34; alt=&#34;iExplorer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;iExplorerは、高機能なiOSデバイスファイルブラウザーです。&lt;a href=&#34;https://macroplant.com/iexplorer&#34;&gt;iExplorer&lt;/a&gt; よりダウンロードできます。iExplorerは、Manifest.dbなどの情報を自動でパースし、より人間にわかりやすい形で表示してくれます。正直これがあれば、バックアップデータの閲覧には困らないと思います。全体的に眺めたい際などは、こちらを使って足りない場合、前述した&lt;code&gt;plutil&lt;/code&gt;コマンドなどを使って解析します。同様のツールとして&lt;code&gt;iBackupBot&lt;/code&gt;や&lt;code&gt;iBackup Viewer&lt;/code&gt;などがあるので、使い比べてみて自分にあったものを使うと良いでしょう。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;今回は、iOSの基本構造やバックアップデータを用いた解析方法などについて簡単にご紹介しました。次は、気が向けば個々のアーティファクトについてより詳細にとりあげて記事を今度書こうかなと思っています。&lt;/p&gt;

&lt;h2 id=&#34;参考資料&#34;&gt;参考資料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.packtpub.com/networking-and-servers/practical-mobile-forensics-third-edition&#34;&gt;Practical Mobile Forensics - Third Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>フォレンジックのためのシステム時刻入門</title>
      <link>https://owlinux1000.github.io/blog/posts/system_time_for_forensics/</link>
      <pubDate>Sat, 23 Feb 2019 20:37:24 +0900</pubDate>
      
      <guid>https://owlinux1000.github.io/blog/posts/system_time_for_forensics/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;フォレンジックなどをやっていると様々な時刻形式と直面することがあります。いざ調べてみると時刻形式は、プラットフォームによって異なる場合が多いことに気づきました。時刻の情報はタイムライン作成では、とても重要な要因となってくるので、適切に時刻を解釈することが必要です。本記事では、よく見る3つの時刻表記についてご紹介します。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;unix-time&#34;&gt;UNIX time&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;UNIX timeはDFIRだけに限らず多くの場面でよく見かける時刻形式の1つです。&lt;strong&gt;UTC（協定世界時）の1970年1月1日0時0分0秒からの経過秒数&lt;/strong&gt;で表す時刻形式です。主要なプログラミング言語の代表的な時刻を扱うライブラリなどでは、UNIX timeをサポートしています。例えばRubyでは以下の様に、UNIX timeを扱うことができます。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#800&#34;&gt;JST_OFFSET&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3600&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1970-01-01 00:00:00&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;to_i &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;JST_OFFSET&lt;/span&gt; &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#=&amp;gt; 0&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#800&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;at(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#=&amp;gt; 1970-01-01 09:00:00 +0900&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;apple-cocoa-core-data-timestamp&#34;&gt;Apple Cocoa Core Data timestamp&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Apple Cocoa Core Data timestampは、主にMac OSやiOSで見かける時刻形式です。Cocoaとは、macOS用のフレームワークです。また、&lt;strong&gt;Mac absolute time&lt;/strong&gt;と表記されることもあります。本時刻形式は、&lt;strong&gt;UTCの2001年1月1日0時0分0秒からの経過秒数&lt;/strong&gt;で表す時刻形式です。UNIX timeとの差分は、&lt;strong&gt;978307200&lt;/strong&gt;なので、これを考慮すればUNIX timeからすぐ算出することができます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;webkit-chrome-time&#34;&gt;WebKit/Chrome time&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;WebKit/Chrome timeは、Google Chrome、OperaやSafariなどのデータで使われている時刻形式です。本時刻形式は、&lt;strong&gt;UTCの1601年1月1日0時0分0秒からの経過マイクロ秒&lt;/strong&gt;で表す時刻形式です。UNIX timeなどと異なりマイクロ秒なので値が大きいという特徴があります。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;便利なツールやサイト&#34;&gt;便利なツールやサイト&lt;/h2&gt;

&lt;p&gt;以下の2つは、システム時刻変換をする際に、使いやすかったツールです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.epochconverter.com/&#34;&gt;Epoch Converter&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;本記事で説明した時刻形式などは概ねカバーしているツールです&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digital-detective.net/dcode/&#34;&gt;DCode&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Epoch Converterと同様の機能を有しているWindowsアプリケーション&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.packtpub.com/networking-and-servers/practical-mobile-forensics-third-edition&#34;&gt;Practical Mobile Forensics - Third Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>新年なのでHugo でGitHub Pages にデプロイ</title>
      <link>https://owlinux1000.github.io/blog/posts/helloworld/</link>
      <pubDate>Wed, 02 Jan 2019 22:27:14 +0900</pubDate>
      
      <guid>https://owlinux1000.github.io/blog/posts/helloworld/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;あけましておめでとうございます。本年もよろしくお願いいたします。&lt;br /&gt;
新年なので、Hugo で技術ブログを作成してみました。私ははてなブログやMedium などいろいろサイトを持っているわけですが、このブログには自分の備忘録的なことを書いて行こうと思います。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-hugo-のインストールと事前準備&#34;&gt;1. Hugo のインストールと事前準備&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;まずはHugo をインストールし、使いたいテーマ(今回はoneというテーマ)をsubmoduleとして取り込む。今回は、GitHub に&lt;code&gt;blog&lt;/code&gt; というリポジトリを作成(アクセスする際には、&lt;code&gt;https://owlinux1000.github.io/blog/&lt;/code&gt;) して、GitHubの設定で &lt;strong&gt;masterブランチのdocs/&lt;/strong&gt; を公開対象として設定する。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;config.toml&lt;/code&gt; を編集する際には、&lt;code&gt;publishDir = &amp;quot;docs&amp;quot;&lt;/code&gt; を追加しておく。これはGitHub 側で公開するディレクトリを&lt;code&gt;docs&lt;/code&gt; にしているから。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;$ brew install hugo
$ hugo new site blog
$ cd blog
$ git init
$ cd themes
$ git submodule add https://github.com/resugary/hugo-theme-one one
$ cp one/exampleSite/config.toml ../../../
$ emacs config.toml # 適宜パラメータを修正する&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;2-記事作成&#34;&gt;2. 記事作成&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;hugo コマンドで記事を作成してまずは、server サブコマンドを使ってPreview を見てみる。大丈夫そうならGitHub にpushする&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ hugo new posts/helloworld &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# この記事&lt;/span&gt;
$ emacs content/posts/helloworld.md &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# draft: false に変更&lt;/span&gt;
$ hugo &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Webページを生成。これでdocsに吐かれる&lt;/span&gt;
$ hugo server &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# アクセスして見れるか確認する&lt;/span&gt;
$ git add .
$ git commit -m &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1st commit!&amp;#34;&lt;/span&gt;
$ git remote add origin git@github.com:owlinux1000/blog.git
$ git push -u origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Hugo を初めて使ってみた感想として結構めんどくさくなかったと思った。ネット上見てるとCIでがんばったりいろいろ見ていたので、プロジェクトサイトでのデプロイにした。毎月1本程度では継続していきたい。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Archives</title>
      <link>https://owlinux1000.github.io/blog/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://owlinux1000.github.io/blog/archives/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>